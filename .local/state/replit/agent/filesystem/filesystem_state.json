{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# BlueCarbon MRV Platform\n\n## Overview\n\nThis is a comprehensive blockchain-based Monitoring, Reporting, and Verification (MRV) platform for blue carbon restoration projects. The application enables NGOs to register coastal ecosystem restoration projects (mangroves, seagrass, saltmarsh), submit field data with geo-tagged evidence, and have their projects verified by administrators to earn tokenized carbon credits on the Polygon blockchain.\n\nThe platform combines modern web technologies with blockchain integration to create a transparent and verifiable system for tracking blue carbon restoration efforts and their environmental impact.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript using Vite as the build tool\n- **UI Framework**: Custom design system built on Radix UI primitives with Tailwind CSS for styling\n- **State Management**: TanStack Query (React Query) for server state management with custom query client\n- **Routing**: Wouter for lightweight client-side routing\n- **Component Library**: Comprehensive UI component library using shadcn/ui components with consistent theming\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **API Design**: RESTful API architecture with organized route handlers\n- **Error Handling**: Centralized error handling middleware with proper HTTP status codes\n- **File Upload**: Multer middleware for handling multipart form data\n\n### Database & ORM\n- **Database**: PostgreSQL with PostGIS extension for spatial data handling\n- **ORM**: Drizzle ORM with type-safe schema definitions\n- **Migrations**: Drizzle Kit for database schema management\n- **Connection**: Neon serverless PostgreSQL with connection pooling\n- **Schema**: Well-structured relational schema with proper foreign key relationships and data types\n\n### Blockchain Integration\n- **Network**: Polygon (Mumbai testnet for development)\n- **Smart Contract Framework**: Hardhat development environment\n- **Contract Standard**: ERC-20 token with role-based access control using OpenZeppelin contracts\n- **Wallet Integration**: MetaMask wallet connection using ethers.js v6\n- **Carbon Credits**: Tokenized carbon credits minted upon project verification\n\n### Authentication & Authorization\n- **Method**: Wallet-based authentication using Ethereum wallet addresses\n- **Roles**: Role-based access control with NGO and Admin user types\n- **Sessions**: Wallet address verification for user identification\n- **Security**: No traditional passwords - relies on blockchain wallet ownership\n\n### File Storage & IPFS\n- **Storage**: IPFS (InterPlanetary File System) for decentralized file storage\n- **Implementation**: Placeholder implementation ready for Web3.Storage integration\n- **Metadata**: JSON metadata files stored alongside media files\n- **File Types**: Support for photos, videos, and documents with proper MIME type handling\n\n### Geospatial Features\n- **Mapping**: Leaflet.js for interactive map visualization\n- **Coordinates**: Latitude/longitude storage with PostGIS point geometry\n- **Spatial Queries**: Database support for geographic queries and spatial indexing\n- **Project Visualization**: Color-coded project markers based on verification status\n\n### Development Environment\n- **Hot Reload**: Vite HMR for fast development iterations\n- **Type Safety**: Full TypeScript coverage across frontend and backend\n- **Code Quality**: ESLint and TypeScript compiler for code quality assurance\n- **Path Aliases**: Organized import structure with path aliases for clean code organization\n\n## External Dependencies\n\n### Core Infrastructure\n- **Neon Database**: Serverless PostgreSQL hosting with connection pooling\n- **Polygon Network**: Ethereum-compatible blockchain for smart contract deployment\n- **IPFS/Web3.Storage**: Decentralized file storage for project evidence and metadata\n\n### Development Tools\n- **Hardhat**: Ethereum development environment for smart contract compilation and deployment\n- **Drizzle Kit**: Database migration and schema management tool\n- **Vite**: Frontend build tool and development server\n- **Replit Integration**: Development environment plugins for seamless Replit experience\n\n### Third-Party Libraries\n- **Radix UI**: Headless UI components for accessibility and functionality\n- **TanStack Query**: Server state management and caching\n- **Ethers.js**: Ethereum blockchain interaction library\n- **Leaflet**: Open-source mapping library for geospatial visualization\n- **Tailwind CSS**: Utility-first CSS framework for styling\n\n### Smart Contract Dependencies\n- **OpenZeppelin Contracts**: Secure, community-audited smart contract implementations\n- **Hardhat Toolbox**: Comprehensive Hardhat plugin suite for development and testing\n- **Polygon Mumbai**: Testnet for development and testing of smart contracts\n\n### API Services\n- **PolygonScan**: Blockchain explorer API for transaction verification\n- **MetaMask**: Browser wallet extension for user authentication and transaction signing\n- **Web3.Storage**: IPFS pinning service for reliable decentralized file storage","size_bytes":5197},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\", \"system-ui\", \"sans-serif\"],\n        serif: [\"var(--font-serif)\", \"Georgia\", \"serif\"],\n        mono: [\"var(--font-mono)\", \"Menlo\", \"monospace\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2824},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"contracts/BlueCarbon.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\n\ncontract BlueCarbon is ERC20, AccessControl, ERC20Burnable {\n    bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n    bytes32 public constant NGO_ROLE = keccak256(\"NGO_ROLE\");\n\n    // Events\n    event ProjectVerified(string indexed projectId, address indexed ngo, uint256 creditsIssued);\n    event CreditsRetired(address indexed owner, uint256 amount, string reason);\n\n    // Project tracking\n    mapping(string => bool) public verifiedProjects;\n    mapping(string => uint256) public projectCredits;\n    \n    // Statistics\n    uint256 public totalProjectsVerified;\n    uint256 public totalCreditsIssued;\n    uint256 public totalCreditsRetired;\n\n    constructor() ERC20(\"BlueCarbon Credit\", \"BC\") {\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _grantRole(ADMIN_ROLE, msg.sender);\n    }\n\n    modifier onlyAdmin() {\n        require(hasRole(ADMIN_ROLE, msg.sender), \"BlueCarbon: caller is not an admin\");\n        _;\n    }\n\n    modifier onlyNGO() {\n        require(hasRole(NGO_ROLE, msg.sender), \"BlueCarbon: caller is not an NGO\");\n        _;\n    }\n\n    function grantNGORole(address ngo) external onlyAdmin {\n        _grantRole(NGO_ROLE, ngo);\n    }\n\n    function revokeNGORole(address ngo) external onlyAdmin {\n        _revokeRole(NGO_ROLE, ngo);\n    }\n\n    function grantAdminRole(address admin) external onlyAdmin {\n        _grantRole(ADMIN_ROLE, admin);\n    }\n\n    function verifyProjectAndMint(\n        string calldata projectId,\n        address ngoAddress,\n        uint256 creditsAmount\n    ) external onlyAdmin {\n        require(!verifiedProjects[projectId], \"BlueCarbon: project already verified\");\n        require(creditsAmount > 0, \"BlueCarbon: credits amount must be greater than 0\");\n        require(ngoAddress != address(0), \"BlueCarbon: invalid NGO address\");\n\n        verifiedProjects[projectId] = true;\n        projectCredits[projectId] = creditsAmount;\n        totalProjectsVerified++;\n        totalCreditsIssued += creditsAmount;\n\n        _mint(ngoAddress, creditsAmount * 10**decimals());\n\n        emit ProjectVerified(projectId, ngoAddress, creditsAmount);\n    }\n\n    function retireCredits(uint256 amount, string calldata reason) external {\n        require(amount > 0, \"BlueCarbon: amount must be greater than 0\");\n        require(balanceOf(msg.sender) >= amount, \"BlueCarbon: insufficient balance\");\n\n        totalCreditsRetired += amount;\n        _burn(msg.sender, amount);\n\n        emit CreditsRetired(msg.sender, amount, reason);\n    }\n\n    function burn(uint256 amount) public override {\n        totalCreditsRetired += amount;\n        super.burn(amount);\n    }\n\n    // View functions\n    function isProjectVerified(string calldata projectId) external view returns (bool) {\n        return verifiedProjects[projectId];\n    }\n\n    function getProjectCredits(string calldata projectId) external view returns (uint256) {\n        return projectCredits[projectId];\n    }\n\n    function getStats() external view returns (\n        uint256 _totalProjects,\n        uint256 _totalIssued,\n        uint256 _totalRetired,\n        uint256 _circulating\n    ) {\n        return (\n            totalProjectsVerified,\n            totalCreditsIssued,\n            totalCreditsRetired,\n            totalSupply()\n        );\n    }\n\n    // Required override for AccessControl\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        override(ERC20, AccessControl)\n        returns (bool)\n    {\n        return super.supportsInterface(interfaceId);\n    }\n}\n","size_bytes":3755},"contracts/CarbonRegistry.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"./BlueCarbon.sol\";\nimport \"./NFTCertificate.sol\";\n\n/**\n * @title CarbonRegistry\n * @dev Registry contract for managing Blue Carbon MRV projects with double-counting prevention\n * Coordinates between BlueCarbon ERC20 tokens and NFT certificates\n */\ncontract CarbonRegistry is Ownable, ReentrancyGuard {\n    \n    BlueCarbon public immutable blueCarbonToken;\n    NFTCertificate public immutable nftCertificate;\n\n    // Project status enum\n    enum ProjectStatus { Pending, Verified, Rejected, Locked }\n\n    // Project registry structure\n    struct RegisteredProject {\n        string projectId;\n        address submitter;\n        uint256 areaHectares;\n        string location;\n        bytes32 locationHash;\n        bytes32 dataHash;\n        ProjectStatus status;\n        uint256 submissionTime;\n        uint256 verificationTime;\n        address verifier;\n        uint256 carbonCredits;\n        uint256 nftTokenId;\n        bool nftMinted;\n    }\n\n    // Mappings for double-counting prevention\n    mapping(string => RegisteredProject) public projects;\n    mapping(bytes32 => bool) public usedLocationHashes;\n    mapping(bytes32 => bool) public usedDataHashes;\n    mapping(address => string[]) public submitterProjects;\n    \n    // Verification requirements\n    mapping(address => bool) public authorizedVerifiers;\n    \n    // Statistics\n    uint256 public totalRegisteredProjects;\n    uint256 public totalVerifiedProjects;\n    uint256 public totalRejectedProjects;\n\n    // Events\n    event ProjectRegistered(\n        string indexed projectId,\n        address indexed submitter,\n        bytes32 locationHash,\n        bytes32 dataHash\n    );\n\n    event ProjectVerified(\n        string indexed projectId,\n        address indexed verifier,\n        uint256 carbonCredits,\n        uint256 nftTokenId\n    );\n\n    event ProjectRejected(\n        string indexed projectId,\n        address indexed verifier,\n        string reason\n    );\n\n    event DuplicateAttemptDetected(\n        string indexed projectId,\n        address indexed submitter,\n        string conflictType\n    );\n\n    event VerifierAuthorized(address indexed verifier);\n    event VerifierRevoked(address indexed verifier);\n\n    constructor(address _blueCarbonToken, address _nftCertificate) {\n        blueCarbonToken = BlueCarbon(_blueCarbonToken);\n        nftCertificate = NFTCertificate(_nftCertificate);\n        authorizedVerifiers[msg.sender] = true;\n    }\n\n    modifier onlyAuthorizedVerifier() {\n        require(authorizedVerifiers[msg.sender], \"CarbonRegistry: Not an authorized verifier\");\n        _;\n    }\n\n    modifier projectExists(string memory projectId) {\n        require(bytes(projects[projectId].projectId).length > 0, \"CarbonRegistry: Project does not exist\");\n        _;\n    }\n\n    /**\n     * @dev Register a new project with double-counting prevention\n     * @param projectId Unique project identifier\n     * @param areaHectares Area of the plantation in hectares\n     * @param location Geographic location description\n     * @param latitude Latitude coordinates (as string to avoid precision loss)\n     * @param longitude Longitude coordinates (as string to avoid precision loss)\n     * @param ipfsDataHash IPFS hash of project documentation\n     */\n    function registerProject(\n        string memory projectId,\n        uint256 areaHectares,\n        string memory location,\n        string memory latitude,\n        string memory longitude,\n        string memory ipfsDataHash\n    ) external nonReentrant {\n        require(bytes(projectId).length > 0, \"CarbonRegistry: Empty project ID\");\n        require(areaHectares > 0, \"CarbonRegistry: Area must be greater than 0\");\n        require(bytes(projects[projectId].projectId).length == 0, \"CarbonRegistry: Project ID already exists\");\n\n        // Create hashes for double-counting prevention\n        bytes32 locationHash = keccak256(abi.encodePacked(latitude, longitude, areaHectares));\n        bytes32 dataHash = keccak256(abi.encodePacked(projectId, ipfsDataHash, msg.sender));\n\n        // Check for duplicate locations (with tolerance for small variations)\n        require(!usedLocationHashes[locationHash], \"CarbonRegistry: Location already registered\");\n        \n        // Check for duplicate data submissions\n        require(!usedDataHashes[dataHash], \"CarbonRegistry: Data already submitted\");\n\n        // Register the project\n        projects[projectId] = RegisteredProject({\n            projectId: projectId,\n            submitter: msg.sender,\n            areaHectares: areaHectares,\n            location: location,\n            locationHash: locationHash,\n            dataHash: dataHash,\n            status: ProjectStatus.Pending,\n            submissionTime: block.timestamp,\n            verificationTime: 0,\n            verifier: address(0),\n            carbonCredits: 0,\n            nftTokenId: 0,\n            nftMinted: false\n        });\n\n        // Mark hashes as used\n        usedLocationHashes[locationHash] = true;\n        usedDataHashes[dataHash] = true;\n\n        // Add to submitter's project list\n        submitterProjects[msg.sender].push(projectId);\n        totalRegisteredProjects++;\n\n        emit ProjectRegistered(projectId, msg.sender, locationHash, dataHash);\n    }\n\n    /**\n     * @dev Verify a project and mint carbon credits + NFT certificate\n     * @param projectId Project to verify\n     * @param carbonCredits Amount of carbon credits to award\n     * @param metadataURI IPFS URI for NFT metadata\n     * @param ecosystem Type of ecosystem (\"mangrove\", \"seagrass\", \"saltmarsh\")\n     */\n    function verifyProjectAndMint(\n        string memory projectId,\n        uint256 carbonCredits,\n        string memory metadataURI,\n        string memory ecosystem\n    ) external onlyAuthorizedVerifier projectExists(projectId) nonReentrant {\n        RegisteredProject storage project = projects[projectId];\n        require(project.status == ProjectStatus.Pending, \"CarbonRegistry: Project not pending verification\");\n        require(carbonCredits > 0, \"CarbonRegistry: Carbon credits must be greater than 0\");\n\n        // Update project status\n        project.status = ProjectStatus.Verified;\n        project.verificationTime = block.timestamp;\n        project.verifier = msg.sender;\n        project.carbonCredits = carbonCredits;\n\n        // Mint carbon credits to the project submitter\n        blueCarbonToken.verifyProjectAndMint(projectId, project.submitter, carbonCredits);\n\n        // Mint NFT certificate\n        uint256 nftTokenId = nftCertificate.mintCertificate(\n            projectId,\n            project.location,\n            project.areaHectares,\n            carbonCredits,\n            ecosystem,\n            project.submitter,\n            metadataURI\n        );\n\n        project.nftTokenId = nftTokenId;\n        project.nftMinted = true;\n\n        totalVerifiedProjects++;\n\n        emit ProjectVerified(projectId, msg.sender, carbonCredits, nftTokenId);\n    }\n\n    /**\n     * @dev Reject a project\n     * @param projectId Project to reject\n     * @param reason Reason for rejection\n     */\n    function rejectProject(\n        string memory projectId,\n        string memory reason\n    ) external onlyAuthorizedVerifier projectExists(projectId) {\n        RegisteredProject storage project = projects[projectId];\n        require(project.status == ProjectStatus.Pending, \"CarbonRegistry: Project not pending verification\");\n\n        project.status = ProjectStatus.Rejected;\n        project.verificationTime = block.timestamp;\n        project.verifier = msg.sender;\n\n        totalRejectedProjects++;\n\n        emit ProjectRejected(projectId, msg.sender, reason);\n    }\n\n    /**\n     * @dev Check if a location is already registered (double-counting prevention)\n     * @param latitude Latitude coordinates\n     * @param longitude Longitude coordinates\n     * @param areaHectares Area in hectares\n     * @return bool True if location is already used\n     */\n    function isLocationUsed(\n        string memory latitude,\n        string memory longitude,\n        uint256 areaHectares\n    ) external view returns (bool) {\n        bytes32 locationHash = keccak256(abi.encodePacked(latitude, longitude, areaHectares));\n        return usedLocationHashes[locationHash];\n    }\n\n    /**\n     * @dev Get project details\n     * @param projectId Project identifier\n     * @return RegisteredProject struct\n     */\n    function getProject(string memory projectId) external view returns (RegisteredProject memory) {\n        return projects[projectId];\n    }\n\n    /**\n     * @dev Get all projects submitted by an address\n     * @param submitter Address to query\n     * @return string[] Array of project IDs\n     */\n    function getProjectsBySubmitter(address submitter) external view returns (string[] memory) {\n        return submitterProjects[submitter];\n    }\n\n    /**\n     * @dev Authorize a verifier\n     * @param verifier Address to authorize\n     */\n    function authorizeVerifier(address verifier) external onlyOwner {\n        require(verifier != address(0), \"CarbonRegistry: Invalid verifier address\");\n        authorizedVerifiers[verifier] = true;\n        emit VerifierAuthorized(verifier);\n    }\n\n    /**\n     * @dev Revoke verifier authorization\n     * @param verifier Address to revoke\n     */\n    function revokeVerifier(address verifier) external onlyOwner {\n        authorizedVerifiers[verifier] = false;\n        emit VerifierRevoked(verifier);\n    }\n\n    /**\n     * @dev Check if an address is an authorized verifier\n     * @param verifier Address to check\n     * @return bool True if authorized\n     */\n    function isAuthorizedVerifier(address verifier) external view returns (bool) {\n        return authorizedVerifiers[verifier];\n    }\n\n    /**\n     * @dev Get registry statistics\n     * @return totalRegistered Total projects registered\n     * @return totalVerified Total projects verified\n     * @return totalRejected Total projects rejected\n     * @return totalPending Total projects pending verification\n     */\n    function getRegistryStats() external view returns (\n        uint256 totalRegistered,\n        uint256 totalVerified,\n        uint256 totalRejected,\n        uint256 totalPending\n    ) {\n        return (\n            totalRegisteredProjects,\n            totalVerifiedProjects,\n            totalRejectedProjects,\n            totalRegisteredProjects - totalVerifiedProjects - totalRejectedProjects\n        );\n    }\n\n    /**\n     * @dev Emergency function to lock a project (in case of disputes)\n     * @param projectId Project to lock\n     */\n    function lockProject(string memory projectId) external onlyOwner projectExists(projectId) {\n        projects[projectId].status = ProjectStatus.Locked;\n    }\n\n    /**\n     * @dev Unlock a previously locked project\n     * @param projectId Project to unlock\n     */\n    function unlockProject(string memory projectId) external onlyOwner projectExists(projectId) {\n        require(projects[projectId].status == ProjectStatus.Locked, \"CarbonRegistry: Project not locked\");\n        projects[projectId].status = ProjectStatus.Pending;\n    }\n}","size_bytes":11219},"contracts/NFTCertificate.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\n\n/**\n * @title NFTCertificate\n * @dev NFT contract for Blue Carbon MRV plantation certificates\n * Each verified plantation project gets a unique NFT with metadata\n */\ncontract NFTCertificate is ERC721, ERC721URIStorage, Ownable {\n    using Counters for Counters.Counter;\n\n    Counters.Counter private _tokenIdCounter;\n\n    // Mapping from project ID to token ID\n    mapping(string => uint256) public projectToTokenId;\n    \n    // Mapping from token ID to project details\n    mapping(uint256 => PlantationData) public tokenToProject;\n    \n    // Mapping to prevent duplicate project certificates\n    mapping(string => bool) public projectCertified;\n\n    struct PlantationData {\n        string projectId;\n        string location;\n        uint256 areaHectares;\n        uint256 carbonCredits;\n        uint256 plantationDate;\n        string ecosystem; // \"mangrove\", \"seagrass\", \"saltmarsh\"\n        address beneficiary;\n        bool verified;\n        bool gisVerified;\n        uint256 gisConfidenceScore; // Scaled by 10000 (e.g., 8500 = 0.85)\n        string sentinelSceneId;\n        uint256 vegetationIndex; // NDVI scaled by 10000\n    }\n\n    event CertificateMinted(\n        uint256 indexed tokenId,\n        string indexed projectId,\n        address indexed beneficiary,\n        uint256 areaHectares,\n        uint256 carbonCredits\n    );\n\n    event ProjectVerified(\n        string indexed projectId,\n        uint256 indexed tokenId,\n        address verifier\n    );\n\n    constructor() ERC721(\"Blue Carbon Certificate\", \"BCC\") {}\n\n    /**\n     * @dev Mint a new plantation certificate NFT\n     * @param projectId Unique project identifier\n     * @param location Geographic location of the plantation\n     * @param areaHectares Area of plantation in hectares\n     * @param carbonCredits Carbon credits generated\n     * @param ecosystem Type of blue carbon ecosystem\n     * @param beneficiary Address that will receive the NFT\n     * @param metadataURI IPFS URI containing certificate metadata\n     * @param gisVerified Whether project is verified by satellite imagery\n     * @param gisConfidenceScore GIS verification confidence (scaled by 10000)\n     * @param sentinelSceneId Sentinel Hub scene identifier\n     * @param vegetationIndex NDVI value (scaled by 10000)\n     */\n    function mintCertificate(\n        string memory projectId,\n        string memory location,\n        uint256 areaHectares,\n        uint256 carbonCredits,\n        string memory ecosystem,\n        address beneficiary,\n        string memory metadataURI,\n        bool gisVerified,\n        uint256 gisConfidenceScore,\n        string memory sentinelSceneId,\n        uint256 vegetationIndex\n    ) public onlyOwner returns (uint256) {\n        require(!projectCertified[projectId], \"Project already certified\");\n        require(beneficiary != address(0), \"Invalid beneficiary address\");\n        require(areaHectares > 0, \"Area must be greater than 0\");\n\n        uint256 tokenId = _tokenIdCounter.current();\n        _tokenIdCounter.increment();\n\n        // Store project data\n        tokenToProject[tokenId] = PlantationData({\n            projectId: projectId,\n            location: location,\n            areaHectares: areaHectares,\n            carbonCredits: carbonCredits,\n            plantationDate: block.timestamp,\n            ecosystem: ecosystem,\n            beneficiary: beneficiary,\n            verified: true,\n            gisVerified: gisVerified,\n            gisConfidenceScore: gisConfidenceScore,\n            sentinelSceneId: sentinelSceneId,\n            vegetationIndex: vegetationIndex\n        });\n\n        // Update mappings\n        projectToTokenId[projectId] = tokenId;\n        projectCertified[projectId] = true;\n\n        // Mint the NFT\n        _safeMint(beneficiary, tokenId);\n        _setTokenURI(tokenId, metadataURI);\n\n        emit CertificateMinted(tokenId, projectId, beneficiary, areaHectares, carbonCredits);\n\n        return tokenId;\n    }\n\n    /**\n     * @dev Update carbon credits for an existing certificate\n     * @param tokenId Token ID of the certificate\n     * @param newCarbonCredits Updated carbon credits amount\n     */\n    function updateCarbonCredits(uint256 tokenId, uint256 newCarbonCredits) public onlyOwner {\n        require(_exists(tokenId), \"Certificate does not exist\");\n        tokenToProject[tokenId].carbonCredits = newCarbonCredits;\n    }\n\n    /**\n     * @dev Get certificate details by project ID\n     * @param projectId Project identifier\n     * @return PlantationData struct with project details\n     */\n    function getCertificateByProject(string memory projectId) public view returns (PlantationData memory) {\n        require(projectCertified[projectId], \"Project not certified\");\n        uint256 tokenId = projectToTokenId[projectId];\n        return tokenToProject[tokenId];\n    }\n\n    /**\n     * @dev Get certificate details by token ID\n     * @param tokenId Token identifier\n     * @return PlantationData struct with project details\n     */\n    function getCertificateByToken(uint256 tokenId) public view returns (PlantationData memory) {\n        require(_exists(tokenId), \"Certificate does not exist\");\n        return tokenToProject[tokenId];\n    }\n\n    /**\n     * @dev Check if a project has been certified\n     * @param projectId Project identifier\n     * @return bool True if project is certified\n     */\n    function isProjectCertified(string memory projectId) public view returns (bool) {\n        return projectCertified[projectId];\n    }\n\n    /**\n     * @dev Get total number of certificates minted\n     * @return uint256 Total certificates\n     */\n    function totalCertificates() public view returns (uint256) {\n        return _tokenIdCounter.current();\n    }\n\n    /**\n     * @dev Get all certificates owned by an address\n     * @param owner Address to query\n     * @return uint256[] Array of token IDs owned\n     */\n    function getCertificatesByOwner(address owner) public view returns (uint256[] memory) {\n        uint256 balance = balanceOf(owner);\n        uint256[] memory tokens = new uint256[](balance);\n        uint256 currentIndex = 0;\n        \n        for (uint256 i = 0; i < _tokenIdCounter.current(); i++) {\n            if (_exists(i) && ownerOf(i) == owner) {\n                tokens[currentIndex] = i;\n                currentIndex++;\n            }\n        }\n        \n        return tokens;\n    }\n\n    /**\n     * @dev Calculate total verified area for an owner\n     * @param owner Address to query\n     * @return uint256 Total area in hectares\n     */\n    function getTotalVerifiedArea(address owner) public view returns (uint256) {\n        uint256[] memory tokens = getCertificatesByOwner(owner);\n        uint256 totalArea = 0;\n        \n        for (uint256 i = 0; i < tokens.length; i++) {\n            totalArea += tokenToProject[tokens[i]].areaHectares;\n        }\n        \n        return totalArea;\n    }\n\n    /**\n     * @dev Calculate total carbon credits for an owner\n     * @param owner Address to query\n     * @return uint256 Total carbon credits\n     */\n    function getTotalCarbonCredits(address owner) public view returns (uint256) {\n        uint256[] memory tokens = getCertificatesByOwner(owner);\n        uint256 totalCredits = 0;\n        \n        for (uint256 i = 0; i < tokens.length; i++) {\n            totalCredits += tokenToProject[tokens[i]].carbonCredits;\n        }\n        \n        return totalCredits;\n    }\n\n    // Override required functions\n    function _burn(uint256 tokenId) internal override(ERC721, ERC721URIStorage) {\n        super._burn(tokenId);\n        \n        // Clean up mappings\n        string memory projectId = tokenToProject[tokenId].projectId;\n        delete tokenToProject[tokenId];\n        delete projectToTokenId[projectId];\n        projectCertified[projectId] = false;\n    }\n\n    function tokenURI(uint256 tokenId) public view override(ERC721, ERC721URIStorage) returns (string memory) {\n        return super.tokenURI(tokenId);\n    }\n\n    function supportsInterface(bytes4 interfaceId) public view override(ERC721, ERC721URIStorage) returns (bool) {\n        return super.supportsInterface(interfaceId);\n    }\n}","size_bytes":8395},"scripts/deploy.js":{"content":"const { ethers } = require(\"hardhat\");\n\nasync function main() {\n  console.log(\"Deploying BlueCarbon contract...\");\n\n  // Get the ContractFactory and Signers here.\n  const [deployer] = await ethers.getSigners();\n  console.log(\"Deploying contracts with the account:\", deployer.address);\n\n  // Deploy the contract\n  const BlueCarbon = await ethers.getContractFactory(\"BlueCarbon\");\n  const blueCarbon = await BlueCarbon.deploy();\n  \n  await blueCarbon.waitForDeployment();\n  const contractAddress = await blueCarbon.getAddress();\n\n  console.log(\"BlueCarbon contract deployed to:\", contractAddress);\n\n  // Grant some initial roles for testing\n  console.log(\"Setting up initial roles...\");\n  \n  // Grant admin role to deployer (already has it from constructor)\n  console.log(\"Deployer has admin role\");\n\n  // You can grant NGO role to specific addresses here\n  // await blueCarbon.grantNGORole(\"0x...\");\n\n  console.log(\"Deployment completed!\");\n  console.log(`Contract address: ${contractAddress}`);\n  console.log(`Deployer address: ${deployer.address}`);\n  \n  // Save deployment info\n  const deploymentInfo = {\n    contractAddress: contractAddress,\n    deployer: deployer.address,\n    network: \"mumbai\",\n    timestamp: new Date().toISOString(),\n  };\n\n  console.log(\"Deployment info:\", JSON.stringify(deploymentInfo, null, 2));\n}\n\nmain()\n  .then(() => process.exit(0))\n  .catch((error) => {\n    console.error(error);\n    process.exit(1);\n  });\n","size_bytes":1439},"server/aiVerifier.js":{"content":"import OpenAI from \"openai\";\nimport { readFileSync } from \"fs\";\nimport { db } from \"./db.js\";\nimport { aiVerificationJobs, fieldData, projects } from \"../shared/schema.js\";\nimport { eq, and } from \"drizzle-orm\";\n\n// Referenced from javascript_openai integration\n// the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\nconst openai = process.env.OPENAI_API_KEY ? new OpenAI({ apiKey: process.env.OPENAI_API_KEY }) : null;\n\n/**\n * Analyzes uploaded drone/satellite images to verify mangrove plantation area and health\n * @param {string} projectId - Project ID\n * @param {string} fieldDataId - Field data ID containing the image\n * @param {string} base64Image - Base64 encoded image data\n * @returns {Promise<{status: 'verified'|'suspicious'|'failed', score: number, metrics: object}>}\n */\nexport async function verifyMangroveImage(projectId, fieldDataId, base64Image) {\n  try {\n    // Check if OpenAI is available\n    if (!openai) {\n      return {\n        status: \"failed\",\n        score: 0,\n        error: \"OpenAI API key not configured. AI verification is not available.\",\n        metrics: {\n          vegetationHealth: 0,\n          mangroveCharacteristics: false,\n          plantationCoverage: 0,\n          anomaliesDetected: true,\n        }\n      };\n    }\n\n    // Create AI verification job record\n    const [jobRecord] = await db\n      .insert(aiVerificationJobs)\n      .values({\n        projectId,\n        fieldDataId,\n        status: \"pending\",\n      })\n      .returning();\n\n    // Analyze image with GPT-5 Vision\n    const analysisPrompt = `\n      Analyze this drone or satellite image for mangrove plantation verification. \n      Provide a detailed assessment focusing on:\n      \n      1. Vegetation Health: Rate the health of visible vegetation (0-100%)\n      2. Mangrove Characteristics: Identify if vegetation shows typical mangrove characteristics (coastal location, prop roots, canopy structure)\n      3. Plantation Area: Estimate the percentage of image area covered by healthy vegetation\n      4. Anomaly Detection: Flag any suspicious elements (obviously fake vegetation, poor image quality, non-coastal environment)\n      5. Verification Confidence: Overall confidence score (0-1) for this being a legitimate mangrove restoration site\n      \n      Respond with JSON in this exact format:\n      {\n        \"vegetationHealth\": number (0-100),\n        \"mangroveCharacteristics\": boolean,\n        \"plantationCoverage\": number (0-100),\n        \"anomaliesDetected\": boolean,\n        \"anomalyDescription\": string,\n        \"verificationConfidence\": number (0-1),\n        \"recommendation\": \"verified\" | \"suspicious\" | \"rejected\",\n        \"analysisNotes\": string\n      }\n    `;\n\n    const visionResponse = await openai.chat.completions.create({\n      model: \"gpt-5\", // the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\n      messages: [\n        {\n          role: \"user\",\n          content: [\n            {\n              type: \"text\",\n              text: analysisPrompt\n            },\n            {\n              type: \"image_url\",\n              image_url: {\n                url: `data:image/jpeg;base64,${base64Image}`\n              }\n            }\n          ],\n        },\n      ],\n      response_format: { type: \"json_object\" },\n      max_completion_tokens: 2048,\n    });\n\n    const analysisResults = JSON.parse(visionResponse.choices[0].message.content);\n    \n    // Determine verification status based on AI analysis\n    let verificationStatus;\n    const confidence = analysisResults.verificationConfidence;\n    \n    if (confidence >= 0.8 && analysisResults.mangroveCharacteristics && !analysisResults.anomaliesDetected) {\n      verificationStatus = \"verified\";\n    } else if (confidence >= 0.5 && !analysisResults.anomaliesDetected) {\n      verificationStatus = \"verified\"; // Still acceptable with moderate confidence\n    } else {\n      verificationStatus = \"suspicious\";\n    }\n\n    // Structure vegetation metrics\n    const vegetationMetrics = {\n      vegetationHealth: analysisResults.vegetationHealth,\n      mangroveCharacteristics: analysisResults.mangroveCharacteristics,\n      plantationCoverage: analysisResults.plantationCoverage,\n      anomaliesDetected: analysisResults.anomaliesDetected,\n    };\n\n    // Update the verification job with results\n    await db\n      .update(aiVerificationJobs)\n      .set({\n        status: verificationStatus,\n        verificationScore: confidence.toString(),\n        vegetationMetrics,\n        analysisResults,\n        completedAt: new Date(),\n        modelRunId: `gpt5-${Date.now()}`,\n      })\n      .where(eq(aiVerificationJobs.id, jobRecord.id));\n\n    return {\n      jobId: jobRecord.id,\n      status: verificationStatus,\n      score: confidence,\n      metrics: vegetationMetrics,\n      analysis: analysisResults,\n    };\n\n  } catch (error) {\n    console.error(\"AI verification failed:\", error);\n    \n    // Update job status to failed\n    await db\n      .update(aiVerificationJobs)\n      .set({\n        status: \"failed\",\n        completedAt: new Date(),\n        analysisResults: { error: error.message },\n      })\n      .where(and(\n        eq(aiVerificationJobs.projectId, projectId),\n        eq(aiVerificationJobs.fieldDataId, fieldDataId)\n      ));\n\n    return {\n      status: \"failed\",\n      score: 0,\n      error: error.message,\n    };\n  }\n}\n\n/**\n * Get verification status for a project\n * @param {string} projectId - Project ID\n * @returns {Promise<object[]>} Array of verification jobs for the project\n */\nexport async function getProjectVerificationStatus(projectId) {\n  try {\n    const verificationJobs = await db\n      .select()\n      .from(aiVerificationJobs)\n      .where(eq(aiVerificationJobs.projectId, projectId))\n      .orderBy(aiVerificationJobs.createdAt);\n\n    return verificationJobs;\n  } catch (error) {\n    console.error(\"Error fetching verification status:\", error);\n    return [];\n  }\n}\n\n/**\n * Check if a project has been verified by AI\n * @param {string} projectId - Project ID\n * @returns {Promise<boolean>} True if project has at least one verified image\n */\nexport async function isProjectAIVerified(projectId) {\n  try {\n    const verifiedJobs = await db\n      .select()\n      .from(aiVerificationJobs)\n      .where(and(\n        eq(aiVerificationJobs.projectId, projectId),\n        eq(aiVerificationJobs.status, \"verified\")\n      ))\n      .limit(1);\n\n    return verifiedJobs.length > 0;\n  } catch (error) {\n    console.error(\"Error checking project verification:\", error);\n    return false;\n  }\n}\n\n/**\n * Batch process verification for multiple images\n * @param {string} projectId - Project ID\n * @param {Array} imageData - Array of {fieldDataId, base64Image} objects\n * @returns {Promise<object[]>} Array of verification results\n */\nexport async function batchVerifyImages(projectId, imageData) {\n  const results = [];\n  \n  for (const { fieldDataId, base64Image } of imageData) {\n    const result = await verifyMangroveImage(projectId, fieldDataId, base64Image);\n    results.push({ fieldDataId, ...result });\n    \n    // Add small delay to avoid rate limiting\n    await new Promise(resolve => setTimeout(resolve, 1000));\n  }\n  \n  return results;\n}","size_bytes":7288},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/gisService.js":{"content":"import { db } from \"./db.js\";\nimport { gisSnapshots, projects } from \"../shared/schema.js\";\nimport { eq } from \"drizzle-orm\";\n\n/**\n * GIS Service for satellite imagery validation using Sentinel Hub API\n * Note: Sentinel Hub API key should be stored in environment variables\n */\n\n/**\n * Validates project coordinates against satellite imagery\n * @param {string} projectId - Project ID\n * @param {number} latitude - Project latitude\n * @param {number} longitude - Project longitude\n * @param {number} areaHectares - Claimed area in hectares\n * @returns {Promise<{validated: boolean, areaMatches: boolean, ndviData: object}>}\n */\nexport async function validateProjectLocation(projectId, latitude, longitude, areaHectares) {\n  try {\n    // Create bounding box around the project location (approximately 1km radius)\n    const boundingBox = createBoundingBox(latitude, longitude, 1000);\n    \n    // For demonstration, using a mock Sentinel Hub API call\n    // In production, replace with actual Sentinel Hub API integration\n    const sentinelData = await mockSentinelHubQuery(boundingBox);\n    \n    // Calculate NDVI (Normalized Difference Vegetation Index) statistics\n    const ndviStats = calculateNDVIStats(sentinelData);\n    \n    // Validate vegetation coverage against claimed area\n    const vegetationAreaHa = calculateVegetationArea(sentinelData, ndviStats);\n    const areaMatches = Math.abs(vegetationAreaHa - areaHectares) / areaHectares <= 0.3; // 30% tolerance\n    \n    // Store GIS snapshot\n    const [gisSnapshot] = await db\n      .insert(gisSnapshots)\n      .values({\n        projectId,\n        sentinelSceneId: sentinelData.sceneId,\n        geometry: {\n          type: \"Polygon\",\n          coordinates: [boundingBoxToPolygon(boundingBox)]\n        },\n        areaValidatedHa: vegetationAreaHa.toString(),\n        ndviStats,\n        imageryDate: new Date(sentinelData.acquisitionDate),\n      })\n      .returning();\n\n    return {\n      validated: ndviStats.averageNDVI > 0.3, // Healthy vegetation threshold\n      areaMatches,\n      vegetationAreaHa,\n      claimedAreaHa: areaHectares,\n      ndviData: ndviStats,\n      gisSnapshotId: gisSnapshot.id,\n      imageryDate: sentinelData.acquisitionDate,\n    };\n\n  } catch (error) {\n    console.error(\"GIS validation failed:\", error);\n    return {\n      validated: false,\n      areaMatches: false,\n      error: error.message,\n    };\n  }\n}\n\n/**\n * Get historical satellite data for trend analysis\n * @param {string} projectId - Project ID\n * @param {number} months - Number of months to look back\n * @returns {Promise<object[]>} Array of historical NDVI data\n */\nexport async function getHistoricalVegetationData(projectId, months = 12) {\n  try {\n    const project = await db\n      .select()\n      .from(projects)\n      .where(eq(projects.id, projectId))\n      .limit(1);\n\n    if (!project.length) {\n      throw new Error(\"Project not found\");\n    }\n\n    const { latitude, longitude } = project[0];\n    const boundingBox = createBoundingBox(parseFloat(latitude), parseFloat(longitude), 1000);\n    \n    // Mock historical data - in production, query Sentinel Hub time series\n    const historicalData = await mockHistoricalSentinelData(boundingBox, months);\n    \n    return historicalData.map(data => ({\n      date: data.acquisitionDate,\n      ndvi: data.averageNDVI,\n      vegetationCover: data.vegetationPercentage,\n      sceneId: data.sceneId,\n    }));\n\n  } catch (error) {\n    console.error(\"Error fetching historical data:\", error);\n    return [];\n  }\n}\n\n/**\n * Get all GIS snapshots for a project\n * @param {string} projectId - Project ID\n * @returns {Promise<object[]>} Array of GIS snapshots\n */\nexport async function getProjectGISSnapshots(projectId) {\n  try {\n    const snapshots = await db\n      .select()\n      .from(gisSnapshots)\n      .where(eq(gisSnapshots.projectId, projectId))\n      .orderBy(gisSnapshots.verifiedAt);\n\n    return snapshots;\n  } catch (error) {\n    console.error(\"Error fetching GIS snapshots:\", error);\n    return [];\n  }\n}\n\n/**\n * Create bounding box around coordinates\n * @param {number} lat - Latitude\n * @param {number} lon - Longitude  \n * @param {number} radiusMeters - Radius in meters\n * @returns {object} Bounding box {north, south, east, west}\n */\nfunction createBoundingBox(lat, lon, radiusMeters) {\n  const earthRadius = 6371000; // Earth radius in meters\n  const latDelta = (radiusMeters / earthRadius) * (180 / Math.PI);\n  const lonDelta = latDelta / Math.cos(lat * Math.PI / 180);\n\n  return {\n    north: lat + latDelta,\n    south: lat - latDelta,\n    east: lon + lonDelta,\n    west: lon - lonDelta,\n  };\n}\n\n/**\n * Convert bounding box to polygon coordinates\n * @param {object} bbox - Bounding box\n * @returns {Array} Polygon coordinates array\n */\nfunction boundingBoxToPolygon(bbox) {\n  return [\n    [bbox.west, bbox.south],\n    [bbox.east, bbox.south],\n    [bbox.east, bbox.north],\n    [bbox.west, bbox.north],\n    [bbox.west, bbox.south], // Close the polygon\n  ];\n}\n\n/**\n * Calculate NDVI statistics from satellite data\n * @param {object} sentinelData - Sentinel satellite data\n * @returns {object} NDVI statistics\n */\nfunction calculateNDVIStats(sentinelData) {\n  // Mock NDVI calculation - in production, calculate from NIR and Red bands\n  const ndviValues = sentinelData.ndviGrid || [];\n  \n  if (ndviValues.length === 0) {\n    return {\n      averageNDVI: 0.4, // Mock healthy vegetation\n      maxNDVI: 0.8,\n      minNDVI: 0.1,\n      vegetationPercentage: 65,\n    };\n  }\n\n  const validNDVI = ndviValues.filter(val => val > -1 && val < 1);\n  const averageNDVI = validNDVI.reduce((sum, val) => sum + val, 0) / validNDVI.length;\n  const maxNDVI = Math.max(...validNDVI);\n  const minNDVI = Math.min(...validNDVI);\n  const vegetationPercentage = (validNDVI.filter(val => val > 0.3).length / validNDVI.length) * 100;\n\n  return {\n    averageNDVI: parseFloat(averageNDVI.toFixed(3)),\n    maxNDVI: parseFloat(maxNDVI.toFixed(3)),\n    minNDVI: parseFloat(minNDVI.toFixed(3)),\n    vegetationPercentage: parseFloat(vegetationPercentage.toFixed(1)),\n  };\n}\n\n/**\n * Calculate vegetation area from satellite data\n * @param {object} sentinelData - Sentinel satellite data\n * @param {object} ndviStats - NDVI statistics\n * @returns {number} Vegetation area in hectares\n */\nfunction calculateVegetationArea(sentinelData, ndviStats) {\n  // Mock calculation - in production, calculate from pixel analysis\n  const totalAreaHa = sentinelData.areaHectares || 100;\n  return totalAreaHa * (ndviStats.vegetationPercentage / 100);\n}\n\n/**\n * Mock Sentinel Hub API query (replace with real implementation)\n * @param {object} boundingBox - Bounding box for query\n * @returns {Promise<object>} Mock satellite data\n */\nasync function mockSentinelHubQuery(boundingBox) {\n  // Simulate API delay\n  await new Promise(resolve => setTimeout(resolve, 1000));\n  \n  return {\n    sceneId: `S2_${Date.now()}`,\n    acquisitionDate: new Date().toISOString(),\n    cloudCover: 15,\n    areaHectares: 100,\n    ndviGrid: Array.from({ length: 100 }, () => Math.random() * 0.8 + 0.1), // Random NDVI values\n  };\n}\n\n/**\n * Mock historical Sentinel data (replace with real implementation)\n * @param {object} boundingBox - Bounding box for query\n * @param {number} months - Number of months\n * @returns {Promise<object[]>} Mock historical data\n */\nasync function mockHistoricalSentinelData(boundingBox, months) {\n  await new Promise(resolve => setTimeout(resolve, 500));\n  \n  const data = [];\n  for (let i = 0; i < months; i++) {\n    const date = new Date();\n    date.setMonth(date.getMonth() - i);\n    \n    data.push({\n      sceneId: `S2_${date.getTime()}`,\n      acquisitionDate: date.toISOString(),\n      averageNDVI: 0.3 + Math.random() * 0.4, // Simulate vegetation growth over time\n      vegetationPercentage: 40 + Math.random() * 40,\n    });\n  }\n  \n  return data.reverse(); // Oldest first\n}\n\n/**\n * Real Sentinel Hub API integration (template for production use)\n * Requires SENTINEL_HUB_CLIENT_ID and SENTINEL_HUB_CLIENT_SECRET environment variables\n */\nexport async function querySentinelHub(boundingBox, fromDate, toDate) {\n  const clientId = process.env.SENTINEL_HUB_CLIENT_ID;\n  const clientSecret = process.env.SENTINEL_HUB_CLIENT_SECRET;\n  \n  if (!clientId || !clientSecret) {\n    console.warn(\"Sentinel Hub credentials not configured, using mock data\");\n    return mockSentinelHubQuery(boundingBox);\n  }\n\n  try {\n    // Step 1: Get OAuth token\n    const tokenResponse = await fetch('https://services.sentinel-hub.com/oauth/token', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: new URLSearchParams({\n        grant_type: 'client_credentials',\n        client_id: clientId,\n        client_secret: clientSecret,\n      }),\n    });\n\n    const tokenData = await tokenResponse.json();\n    const accessToken = tokenData.access_token;\n\n    // Step 2: Query satellite data\n    const evalscript = `\n      //VERSION=3\n      function setup() {\n        return {\n          input: [\"B04\", \"B08\"],\n          output: { bands: 1 }\n        };\n      }\n      \n      function evaluatePixel(sample) {\n        let ndvi = (sample.B08 - sample.B04) / (sample.B08 + sample.B04);\n        return [ndvi];\n      }\n    `;\n\n    const requestBody = {\n      input: {\n        bounds: {\n          bbox: [boundingBox.west, boundingBox.south, boundingBox.east, boundingBox.north],\n          properties: { crs: \"http://www.opengis.net/def/crs/EPSG/0/4326\" }\n        },\n        data: [\n          {\n            type: \"sentinel-2-l2a\",\n            dataFilter: {\n              timeRange: {\n                from: fromDate || new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString(),\n                to: toDate || new Date().toISOString()\n              },\n              maxCloudCoverage: 30\n            }\n          }\n        ]\n      },\n      output: {\n        width: 512,\n        height: 512,\n        responses: [\n          {\n            identifier: \"default\",\n            format: { type: \"image/tiff\" }\n          }\n        ]\n      },\n      evalscript: evalscript\n    };\n\n    const response = await fetch('https://services.sentinel-hub.com/api/v1/process', {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${accessToken}`,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(requestBody),\n    });\n\n    if (!response.ok) {\n      throw new Error(`Sentinel Hub API error: ${response.statusText}`);\n    }\n\n    // Process the response (TIFF data) - this would need additional processing\n    const imageData = await response.arrayBuffer();\n    \n    return {\n      sceneId: `S2_${Date.now()}`,\n      acquisitionDate: new Date().toISOString(),\n      cloudCover: 0,\n      areaHectares: 100,\n      imageData: imageData,\n      // Additional processing would extract NDVI values from the TIFF\n    };\n\n  } catch (error) {\n    console.error(\"Sentinel Hub query failed:\", error);\n    return mockSentinelHubQuery(boundingBox);\n  }\n}","size_bytes":10966},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertUserSchema, insertProjectSchema, insertFieldDataSchema, insertAuditLogSchema } from \"@shared/schema\";\nimport { verifyMangroveImage, getProjectVerificationStatus, batchVerifyImages } from \"./aiVerifier.js\";\nimport { gisVerificationService, type GisCoordinates } from \"./gisService\";\nimport { z } from \"zod\";\nimport multer from \"multer\";\n\nconst upload = multer({ storage: multer.memoryStorage() });\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth endpoint - register or login user\n  app.post(\"/api/auth/wallet\", async (req, res) => {\n    try {\n      const { walletAddress, role, organizationName, email } = req.body;\n      \n      if (!walletAddress) {\n        return res.status(400).json({ message: \"Wallet address is required\" });\n      }\n\n      let user = await storage.getUserByWallet(walletAddress);\n      \n      if (!user) {\n        // Validate and assign the requested role\n        const validRoles = [\"ngo\", \"admin\", \"industry\", \"government\"];\n        const assignedRole = validRoles.includes(role) ? role : \"ngo\";\n        \n        const userData = insertUserSchema.parse({\n          walletAddress,\n          role: assignedRole,\n          organizationName,\n          email,\n        });\n        user = await storage.createUser(userData);\n      }\n\n      res.json({ user });\n    } catch (error) {\n      console.error(\"Auth error:\", error);\n      res.status(500).json({ message: \"Authentication failed\" });\n    }\n  });\n\n  // Get all projects or filter by status\n  app.get(\"/api/projects\", async (req, res) => {\n    try {\n      const status = req.query.status as string | undefined;\n      const projects = await storage.getProjects(status);\n      res.json({ projects });\n    } catch (error) {\n      console.error(\"Get projects error:\", error);\n      res.status(500).json({ message: \"Failed to fetch projects\" });\n    }\n  });\n\n  // Get projects for a specific user\n  app.get(\"/api/projects/user/:userId\", async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const projects = await storage.getProjectsByUser(userId);\n      res.json({ projects });\n    } catch (error) {\n      console.error(\"Get user projects error:\", error);\n      res.status(500).json({ message: \"Failed to fetch user projects\" });\n    }\n  });\n\n  // Get single project\n  app.get(\"/api/projects/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const project = await storage.getProject(id);\n      \n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n\n      const fieldData = await storage.getFieldDataByProject(id);\n      res.json({ project, fieldData });\n    } catch (error) {\n      console.error(\"Get project error:\", error);\n      res.status(500).json({ message: \"Failed to fetch project\" });\n    }\n  });\n\n  // Create new project\n  app.post(\"/api/projects\", async (req, res) => {\n    try {\n      const projectData = insertProjectSchema.parse(req.body);\n      const project = await storage.createProject(projectData);\n\n      // Create audit log\n      await storage.createAuditLog({\n        projectId: project.id,\n        userId: project.submittedBy,\n        action: \"submitted\",\n        details: { projectName: project.name },\n      });\n\n      // Trigger GIS verification automatically for the new project\n      try {\n        const gisCoordinates: GisCoordinates = {\n          latitude: parseFloat(project.latitude),\n          longitude: parseFloat(project.longitude),\n          areaHectares: parseFloat(project.areaHectares),\n          projectType: project.projectType as \"mangrove\" | \"seagrass\" | \"saltmarsh\" | \"other\"\n        };\n\n        const gisResult = await gisVerificationService.verifyPlantationArea(gisCoordinates);\n        \n        // Update project with GIS verification results\n        await storage.updateProject(project.id, {\n          gisVerificationStatus: gisResult.status === \"verified\" ? \"verified\" : gisResult.status === \"failed\" ? \"failed\" : \"pending\",\n          gisVerifiedAt: new Date(),\n          gisConfidenceScore: gisResult.confidenceScore.toString()\n        });\n\n        // Store GIS snapshot\n        await storage.createGisSnapshot({\n          projectId: project.id,\n          sentinelSceneId: gisResult.metadata.sentinelSceneId,\n          geometry: {\n            type: \"Point\",\n            coordinates: [gisCoordinates.longitude, gisCoordinates.latitude]\n          },\n          areaValidatedHa: gisResult.areaValidatedHectares.toString(),\n          ndviStats: {\n            ndvi: gisResult.vegetationIndex,\n            vegetationHealth: gisResult.metadata.vegetationHealth,\n            cloudCover: gisResult.metadata.cloudCover\n          },\n          imageryDate: new Date(gisResult.imageDate)\n        });\n\n        console.log(`GIS verification completed for project ${project.id}: ${gisResult.status} (confidence: ${gisResult.confidenceScore})`);\n      } catch (gisError) {\n        console.error(\"GIS verification failed:\", gisError);\n        // Don't fail the project creation if GIS verification fails\n        await storage.updateProject(project.id, {\n          gisVerificationStatus: \"failed\"\n        });\n      }\n\n      res.status(201).json({ project });\n    } catch (error) {\n      console.error(\"Create project error:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid project data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create project\" });\n    }\n  });\n\n  // Verify project (admin only)\n  app.post(\"/api/projects/:id/verify\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { status, verifiedBy, carbonCredits, blockchainTxHash } = req.body;\n\n      if (![\"verified\", \"rejected\"].includes(status)) {\n        return res.status(400).json({ message: \"Invalid status\" });\n      }\n\n      const updates = {\n        status: status as \"verified\" | \"rejected\",\n        verifiedBy,\n        verifiedAt: new Date(),\n        ...(carbonCredits && { carbonCredits: carbonCredits.toString() }),\n        ...(blockchainTxHash && { blockchainTxHash }),\n      };\n\n      const project = await storage.updateProject(id, updates);\n\n      // Create audit log\n      await storage.createAuditLog({\n        projectId: id,\n        userId: verifiedBy,\n        action: status === \"verified\" ? \"verified\" : \"rejected\",\n        details: { carbonCredits, blockchainTxHash },\n      });\n\n      res.json({ project });\n    } catch (error) {\n      console.error(\"Verify project error:\", error);\n      res.status(500).json({ message: \"Failed to verify project\" });\n    }\n  });\n\n  // Upload field data\n  app.post(\"/api/field-data\", upload.array(\"files\"), async (req, res) => {\n    try {\n      const { projectId, fileType } = req.body;\n      const files = req.files as Express.Multer.File[];\n\n      if (!files || files.length === 0) {\n        return res.status(400).json({ message: \"No files uploaded\" });\n      }\n\n      // TODO: Upload files to IPFS using web3.storage\n      // For now, we'll simulate IPFS hashes\n      const uploadedFiles = [];\n\n      for (const file of files) {\n        // Simulate IPFS upload\n        const mockIpfsHash = `Qm${Math.random().toString(36).substring(2, 15)}`;\n        \n        const fieldDataItem = await storage.createFieldData({\n          projectId,\n          fileType: fileType as \"photo\" | \"video\" | \"document\",\n          fileName: file.originalname,\n          ipfsHash: mockIpfsHash,\n          metadata: {\n            size: file.size,\n            mimeType: file.mimetype,\n            uploadedAt: new Date().toISOString(),\n          },\n        });\n\n        uploadedFiles.push(fieldDataItem);\n      }\n\n      res.status(201).json({ fieldData: uploadedFiles });\n    } catch (error) {\n      console.error(\"Upload field data error:\", error);\n      res.status(500).json({ message: \"Failed to upload field data\" });\n    }\n  });\n\n  // Get field data for a project\n  app.get(\"/api/field-data/:projectId\", async (req, res) => {\n    try {\n      const { projectId } = req.params;\n      const fieldData = await storage.getFieldDataByProject(projectId);\n      res.json({ fieldData });\n    } catch (error) {\n      console.error(\"Get field data error:\", error);\n      res.status(500).json({ message: \"Failed to fetch field data\" });\n    }\n  });\n\n  // Get audit logs\n  app.get(\"/api/audit\", async (req, res) => {\n    try {\n      const projectId = req.query.projectId as string | undefined;\n      const auditLogs = await storage.getAuditLogs(projectId);\n      res.json({ auditLogs });\n    } catch (error) {\n      console.error(\"Get audit logs error:\", error);\n      res.status(500).json({ message: \"Failed to fetch audit logs\" });\n    }\n  });\n\n  // AI Verification Routes\n  app.post(\"/api/verification/submit\", upload.single(\"image\"), async (req, res) => {\n    try {\n      const { projectId, fieldDataId } = req.body;\n      const imageFile = req.file;\n\n      if (!imageFile) {\n        return res.status(400).json({ message: \"Image file is required\" });\n      }\n\n      // Convert image to base64\n      const base64Image = imageFile.buffer.toString('base64');\n      \n      // Run AI verification\n      const result = await verifyMangroveImage(projectId, fieldDataId, base64Image);\n      \n      res.json(result);\n    } catch (error) {\n      console.error(\"AI verification error:\", error);\n      res.status(500).json({ message: \"AI verification failed\" });\n    }\n  });\n\n  app.get(\"/api/verification/status/:projectId\", async (req, res) => {\n    try {\n      const { projectId } = req.params;\n      const verificationJobs = await getProjectVerificationStatus(projectId);\n      res.json({ verificationJobs });\n    } catch (error) {\n      console.error(\"Get verification status error:\", error);\n      res.status(500).json({ message: \"Failed to get verification status\" });\n    }\n  });\n\n  // GIS Validation Routes\n  app.post(\"/api/gis/validate\", async (req, res) => {\n    try {\n      const { latitude, longitude, areaHectares, projectType } = req.body;\n      \n      const gisCoordinates: GisCoordinates = {\n        latitude: parseFloat(latitude),\n        longitude: parseFloat(longitude),\n        areaHectares: parseFloat(areaHectares),\n        projectType: projectType as \"mangrove\" | \"seagrass\" | \"saltmarsh\" | \"other\"\n      };\n      \n      const validationResult = await gisVerificationService.verifyPlantationArea(gisCoordinates);\n      \n      res.json(validationResult);\n    } catch (error) {\n      console.error(\"GIS validation error:\", error);\n      res.status(500).json({ message: \"GIS validation failed\" });\n    }\n  });\n\n  app.get(\"/api/gis/snapshots/:projectId\", async (req, res) => {\n    try {\n      const { projectId } = req.params;\n      const snapshots = await storage.getGisSnapshotsByProject(projectId);\n      res.json({ snapshots });\n    } catch (error) {\n      console.error(\"Get GIS snapshots error:\", error);\n      res.status(500).json({ message: \"Failed to get GIS snapshots\" });\n    }\n  });\n\n  app.get(\"/api/gis/overlays\", async (req, res) => {\n    try {\n      // Mock GIS overlay data for map display\n      const overlays = [\n        {\n          projectId: \"project1\",\n          ndviLayer: \"https://sentinel-hub.example.com/ndvi/layer1\",\n          sentinelImagery: \"https://sentinel-hub.example.com/rgb/scene1\",\n          bounds: [[10.0, -5.0], [10.1, -4.9]]\n        }\n      ];\n      \n      res.json(overlays);\n    } catch (error) {\n      console.error(\"Get GIS overlays error:\", error);\n      res.status(500).json({ message: \"Failed to get GIS overlays\" });\n    }\n  });\n\n  // Map Data Routes\n  app.get(\"/api/projects/map-data\", async (req, res) => {\n    try {\n      const projects = await storage.getProjects(\"verified\");\n      \n      const mapProjects = projects.map(project => ({\n        id: project.id,\n        name: project.name,\n        latitude: parseFloat(project.latitude),\n        longitude: parseFloat(project.longitude),\n        status: project.status,\n        ecosystem: project.projectType,\n        areaHectares: parseFloat(project.areaHectares),\n        carbonCredits: parseFloat(project.carbonCredits || \"0\"),\n        aiVerificationScore: Math.random() * 0.3 + 0.7, // Mock AI score\n        gisValidated: Math.random() > 0.2, // Mock GIS validation\n        nftTokenId: Math.floor(Math.random() * 1000) + 1,\n        polygon: [], // Mock polygon data\n        ndviData: {\n          averageNDVI: Math.random() * 0.4 + 0.4,\n          vegetationPercentage: Math.random() * 30 + 60\n        }\n      }));\n      \n      res.json(mapProjects);\n    } catch (error) {\n      console.error(\"Get map data error:\", error);\n      res.status(500).json({ message: \"Failed to get map data\" });\n    }\n  });\n\n  // Industry Dashboard Routes\n  app.get(\"/api/credits/marketplace\", async (req, res) => {\n    try {\n      const verifiedProjects = await storage.getProjects(\"verified\");\n      \n      const marketplace = verifiedProjects.map(project => ({\n        id: project.id,\n        projectId: project.id,\n        projectName: project.name,\n        location: project.location,\n        ecosystem: project.projectType,\n        areaHectares: parseFloat(project.areaHectares),\n        creditsAvailable: Math.floor(parseFloat(project.carbonCredits || \"0\") * Math.random()),\n        pricePerCredit: Math.floor(Math.random() * 20) + 10,\n        nftTokenId: Math.floor(Math.random() * 1000) + 1,\n        verifiedAt: project.verifiedAt,\n        submitterOrg: \"NGO Partner\"\n      }));\n      \n      res.json(marketplace);\n    } catch (error) {\n      console.error(\"Get marketplace error:\", error);\n      res.status(500).json({ message: \"Failed to get marketplace data\" });\n    }\n  });\n\n  app.get(\"/api/credits/purchase-history\", async (req, res) => {\n    try {\n      // Mock purchase history data\n      const purchaseHistory = [\n        {\n          id: \"purchase1\",\n          projectId: \"proj1\",\n          projectName: \"Mangrove Restoration Sundarbans\",\n          creditsRetired: 150,\n          retirementReason: \"Annual carbon offset program\",\n          retiredAt: new Date().toISOString(),\n          nftCertificateUrl: \"https://ipfs.io/certificate1\"\n        }\n      ];\n      \n      res.json(purchaseHistory);\n    } catch (error) {\n      console.error(\"Get purchase history error:\", error);\n      res.status(500).json({ message: \"Failed to get purchase history\" });\n    }\n  });\n\n  app.get(\"/api/industry/stats\", async (req, res) => {\n    try {\n      const stats = {\n        totalCreditsPurchased: 1250,\n        monthlyGrowth: 15,\n        totalCO2Offset: 2500,\n        projectsSupported: 8,\n        countries: 4,\n        nftCertificates: 12\n      };\n      \n      res.json(stats);\n    } catch (error) {\n      console.error(\"Get industry stats error:\", error);\n      res.status(500).json({ message: \"Failed to get industry stats\" });\n    }\n  });\n\n  app.post(\"/api/credits/purchase\", async (req, res) => {\n    try {\n      const { projectId, credits, retirementReason } = req.body;\n      \n      // Mock purchase processing\n      const purchase = {\n        id: `purchase_${Date.now()}`,\n        projectId,\n        credits,\n        retirementReason,\n        timestamp: new Date().toISOString(),\n        nftCertificateUrl: `https://ipfs.io/certificate_${Date.now()}`\n      };\n      \n      res.json(purchase);\n    } catch (error) {\n      console.error(\"Purchase credits error:\", error);\n      res.status(500).json({ message: \"Failed to purchase credits\" });\n    }\n  });\n\n  // Government Dashboard Routes\n  app.get(\"/api/government/national-stats\", async (req, res) => {\n    try {\n      const projects = await storage.getProjects();\n      const verifiedProjects = projects.filter(p => p.status === \"verified\");\n      \n      const stats = {\n        totalCarbonStock: verifiedProjects.reduce((sum, p) => sum + parseFloat(p.carbonCredits || \"0\"), 0),\n        yearOverYearGrowth: 18,\n        verifiedProjects: verifiedProjects.length,\n        pendingVerification: projects.filter(p => p.status === \"pending\").length,\n        totalAreaRestored: verifiedProjects.reduce((sum, p) => sum + parseFloat(p.areaHectares || \"0\"), 0),\n        regions: 5,\n        communitiesEngaged: 45,\n        ngoPartners: 12\n      };\n      \n      res.json(stats);\n    } catch (error) {\n      console.error(\"Get national stats error:\", error);\n      res.status(500).json({ message: \"Failed to get national stats\" });\n    }\n  });\n\n  app.get(\"/api/government/regional-data\", async (req, res) => {\n    try {\n      const regionalData = [\n        {\n          region: \"Coastal Bengal\",\n          projectsCount: 8,\n          areaRestored: 450,\n          carbonStored: 2250,\n          communities: 15\n        },\n        {\n          region: \"Western Ghats\",\n          projectsCount: 5,\n          areaRestored: 280,\n          carbonStored: 1400,\n          communities: 8\n        },\n        {\n          region: \"Andaman Islands\",\n          projectsCount: 3,\n          areaRestored: 120,\n          carbonStored: 600,\n          communities: 5\n        }\n      ];\n      \n      res.json(regionalData);\n    } catch (error) {\n      console.error(\"Get regional data error:\", error);\n      res.status(500).json({ message: \"Failed to get regional data\" });\n    }\n  });\n\n  app.get(\"/api/government/policy-insights\", async (req, res) => {\n    try {\n      const policyInsights = [\n        {\n          id: \"insight1\",\n          title: \"Accelerated Mangrove Restoration Needed\",\n          description: \"Current restoration rates are below targets for achieving national climate goals by 2030.\",\n          impact: \"high\",\n          region: \"National\",\n          recommendations: [\n            \"Increase funding for community-based restoration programs\",\n            \"Streamline verification processes for faster project approval\",\n            \"Develop regional centers of excellence for blue carbon research\"\n          ]\n        }\n      ];\n      \n      res.json(policyInsights);\n    } catch (error) {\n      console.error(\"Get policy insights error:\", error);\n      res.status(500).json({ message: \"Failed to get policy insights\" });\n    }\n  });\n\n  app.get(\"/api/government/carbon-trends\", async (req, res) => {\n    try {\n      const carbonTrends = Array.from({ length: 12 }, (_, i) => ({\n        month: new Date(2024, i).toLocaleDateString('en-US', { month: 'short', year: 'numeric' }),\n        carbonStored: Math.floor(Math.random() * 500) + 1000 + (i * 50)\n      }));\n      \n      res.json(carbonTrends);\n    } catch (error) {\n      console.error(\"Get carbon trends error:\", error);\n      res.status(500).json({ message: \"Failed to get carbon trends\" });\n    }\n  });\n\n  app.get(\"/api/government/ecosystem-distribution\", async (req, res) => {\n    try {\n      const ecosystemData = [\n        { name: \"Mangrove\", area: 650 },\n        { name: \"Seagrass\", area: 280 },\n        { name: \"Salt Marsh\", area: 120 },\n        { name: \"Other\", area: 80 }\n      ];\n      \n      res.json(ecosystemData);\n    } catch (error) {\n      console.error(\"Get ecosystem distribution error:\", error);\n      res.status(500).json({ message: \"Failed to get ecosystem distribution\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":19248},"server/storage.ts":{"content":"import { users, projects, fieldData, auditLogs, gisSnapshots, type User, type Project, type FieldData, type AuditLog, type GisSnapshot, type InsertUser, type InsertProject, type InsertFieldData, type InsertAuditLog, type InsertGisSnapshot } from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, desc } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User methods\n  getUser(id: string): Promise<User | undefined>;\n  getUserByWallet(walletAddress: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n\n  // Project methods\n  getProject(id: string): Promise<Project | undefined>;\n  getProjects(status?: string): Promise<Project[]>;\n  getProjectsByUser(userId: string): Promise<Project[]>;\n  createProject(project: InsertProject): Promise<Project>;\n  updateProject(id: string, updates: Partial<Project>): Promise<Project>;\n\n  // Field data methods\n  getFieldDataByProject(projectId: string): Promise<FieldData[]>;\n  createFieldData(fieldData: InsertFieldData): Promise<FieldData>;\n\n  // Audit log methods\n  createAuditLog(auditLog: InsertAuditLog): Promise<AuditLog>;\n  getAuditLogs(projectId?: string): Promise<AuditLog[]>;\n\n  // GIS snapshot methods\n  createGisSnapshot(gisSnapshot: InsertGisSnapshot): Promise<GisSnapshot>;\n  getGisSnapshotsByProject(projectId: string): Promise<GisSnapshot[]>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByWallet(walletAddress: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.walletAddress, walletAddress));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db.insert(users).values([{\n      ...insertUser,\n      role: (insertUser.role || \"ngo\") as \"ngo\" | \"admin\"\n    }]).returning();\n    return user;\n  }\n\n  async getProject(id: string): Promise<Project | undefined> {\n    const [project] = await db.select().from(projects).where(eq(projects.id, id));\n    return project || undefined;\n  }\n\n  async getProjects(status?: string): Promise<Project[]> {\n    if (status) {\n      return await db.select().from(projects).where(eq(projects.status, status as any)).orderBy(desc(projects.createdAt));\n    }\n    return await db.select().from(projects).orderBy(desc(projects.createdAt));\n  }\n\n  async getProjectsByUser(userId: string): Promise<Project[]> {\n    return await db.select().from(projects).where(eq(projects.submittedBy, userId)).orderBy(desc(projects.createdAt));\n  }\n\n  async createProject(insertProject: InsertProject): Promise<Project> {\n    const [project] = await db.insert(projects).values([{\n      ...insertProject,\n      projectType: insertProject.projectType as \"mangrove\" | \"seagrass\" | \"saltmarsh\" | \"other\"\n    }]).returning();\n    return project;\n  }\n\n  async updateProject(id: string, updates: Partial<Omit<Project, 'id' | 'createdAt'>>): Promise<Project> {\n    const [project] = await db.update(projects).set(updates).where(eq(projects.id, id)).returning();\n    return project;\n  }\n\n  async getFieldDataByProject(projectId: string): Promise<FieldData[]> {\n    return await db.select().from(fieldData).where(eq(fieldData.projectId, projectId));\n  }\n\n  async createFieldData(insertFieldData: InsertFieldData): Promise<FieldData> {\n    const [data] = await db.insert(fieldData).values([{\n      ...insertFieldData,\n      fileType: insertFieldData.fileType as \"photo\" | \"video\" | \"document\"\n    }]).returning();\n    return data;\n  }\n\n  async createAuditLog(insertAuditLog: InsertAuditLog): Promise<AuditLog> {\n    const [log] = await db.insert(auditLogs).values([{\n      ...insertAuditLog,\n      action: insertAuditLog.action as \"submitted\" | \"verified\" | \"rejected\" | \"credits_minted\"\n    }]).returning();\n    return log;\n  }\n\n  async getAuditLogs(projectId?: string): Promise<AuditLog[]> {\n    if (projectId) {\n      return await db.select().from(auditLogs).where(eq(auditLogs.projectId, projectId)).orderBy(desc(auditLogs.timestamp));\n    }\n    return await db.select().from(auditLogs).orderBy(desc(auditLogs.timestamp));\n  }\n\n  async createGisSnapshot(insertGisSnapshot: InsertGisSnapshot): Promise<GisSnapshot> {\n    const [snapshot] = await db.insert(gisSnapshots).values([insertGisSnapshot]).returning();\n    return snapshot;\n  }\n\n  async getGisSnapshotsByProject(projectId: string): Promise<GisSnapshot[]> {\n    return await db.select().from(gisSnapshots).where(eq(gisSnapshots.projectId, projectId)).orderBy(desc(gisSnapshots.verifiedAt));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":4710},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql, relations } from \"drizzle-orm\";\nimport { pgTable, text, varchar, decimal, timestamp, boolean, jsonb, point } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  walletAddress: text(\"wallet_address\").notNull().unique(),\n  role: text(\"role\").notNull().$type<\"ngo\" | \"admin\" | \"industry\" | \"government\">().default(\"ngo\"),\n  organizationName: text(\"organization_name\"),\n  email: text(\"email\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const projects = pgTable(\"projects\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  location: text(\"location\").notNull(),\n  latitude: decimal(\"latitude\", { precision: 10, scale: 8 }).notNull(),\n  longitude: decimal(\"longitude\", { precision: 11, scale: 8 }).notNull(),\n  coordinates: point(\"coordinates\"), // PostGIS point for spatial queries\n  areaHectares: decimal(\"area_hectares\", { precision: 10, scale: 2 }).notNull(),\n  projectType: text(\"project_type\").notNull().$type<\"mangrove\" | \"seagrass\" | \"saltmarsh\" | \"other\">(),\n  status: text(\"status\").notNull().$type<\"pending\" | \"verified\" | \"rejected\">().default(\"pending\"),\n  gisVerificationStatus: text(\"gis_verification_status\").notNull().$type<\"pending\" | \"verified\" | \"failed\" | \"not_required\">().default(\"pending\"),\n  gisVerifiedAt: timestamp(\"gis_verified_at\"),\n  gisConfidenceScore: decimal(\"gis_confidence_score\", { precision: 5, scale: 4 }), // 0-1 confidence score\n  submittedBy: varchar(\"submitted_by\").notNull().references(() => users.id),\n  verifiedBy: varchar(\"verified_by\").references(() => users.id),\n  carbonCredits: decimal(\"carbon_credits\", { precision: 10, scale: 2 }).default(\"0\"),\n  blockchainTxHash: text(\"blockchain_tx_hash\"),\n  ipfsHash: text(\"ipfs_hash\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  verifiedAt: timestamp(\"verified_at\"),\n});\n\nexport const fieldData = pgTable(\"field_data\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  projectId: varchar(\"project_id\").notNull().references(() => projects.id),\n  fileType: text(\"file_type\").notNull().$type<\"photo\" | \"video\" | \"document\">(),\n  fileName: text(\"file_name\").notNull(),\n  ipfsHash: text(\"ipfs_hash\").notNull(),\n  metadata: jsonb(\"metadata\"), // GPS coordinates, timestamp, etc.\n  uploadedAt: timestamp(\"uploaded_at\").defaultNow().notNull(),\n});\n\nexport const auditLogs = pgTable(\"audit_logs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  projectId: varchar(\"project_id\").notNull().references(() => projects.id),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  action: text(\"action\").notNull().$type<\"submitted\" | \"verified\" | \"rejected\" | \"credits_minted\">(),\n  details: jsonb(\"details\"),\n  timestamp: timestamp(\"timestamp\").defaultNow().notNull(),\n});\n\n// AI Verification Jobs table\nexport const aiVerificationJobs = pgTable(\"ai_verification_jobs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  projectId: varchar(\"project_id\").notNull().references(() => projects.id),\n  fieldDataId: varchar(\"field_data_id\").notNull().references(() => fieldData.id),\n  modelRunId: text(\"model_run_id\"),\n  vegetationMetrics: jsonb(\"vegetation_metrics\"), // canopy density, health score, etc.\n  verificationScore: decimal(\"verification_score\", { precision: 5, scale: 4 }), // 0-1 confidence score\n  status: text(\"status\").notNull().$type<\"pending\" | \"verified\" | \"suspicious\" | \"failed\">().default(\"pending\"),\n  analysisResults: jsonb(\"analysis_results\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  completedAt: timestamp(\"completed_at\"),\n});\n\n// GIS Snapshots table  \nexport const gisSnapshots = pgTable(\"gis_snapshots\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  projectId: varchar(\"project_id\").notNull().references(() => projects.id),\n  sentinelSceneId: text(\"sentinel_scene_id\"),\n  geometry: jsonb(\"geometry\"), // GeoJSON polygon\n  areaValidatedHa: decimal(\"area_validated_ha\", { precision: 10, scale: 2 }),\n  ndviStats: jsonb(\"ndvi_stats\"),\n  imageryDate: timestamp(\"imagery_date\"),\n  verifiedAt: timestamp(\"verified_at\").defaultNow().notNull(),\n});\n\n// NFT Certificates table\nexport const nftCertificates = pgTable(\"nft_certificates\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  tokenId: text(\"token_id\").notNull().unique(),\n  projectId: varchar(\"project_id\").notNull().references(() => projects.id),\n  metadataCID: text(\"metadata_cid\").notNull(),\n  ownerWallet: text(\"owner_wallet\").notNull(),\n  mintedTxHash: text(\"minted_tx_hash\").notNull(),\n  contractAddress: text(\"contract_address\").notNull(),\n  mintedAt: timestamp(\"minted_at\").defaultNow().notNull(),\n});\n\n// Registry Locks table for double-counting prevention\nexport const registryLocks = pgTable(\"registry_locks\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  projectId: varchar(\"project_id\").notNull().references(() => projects.id),\n  source: text(\"source\").notNull().$type<\"coordinates\" | \"area\" | \"ipfs_hash\">(),\n  hashDigest: text(\"hash_digest\").notNull().unique(),\n  lockedAt: timestamp(\"locked_at\").defaultNow().notNull(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  projects: many(projects, { relationName: \"submitted_projects\" }),\n  verifiedProjects: many(projects, { relationName: \"verified_projects\" }),\n  auditLogs: many(auditLogs),\n}));\n\nexport const projectsRelations = relations(projects, ({ one, many }) => ({\n  submitter: one(users, {\n    fields: [projects.submittedBy],\n    references: [users.id],\n    relationName: \"submitted_projects\",\n  }),\n  verifier: one(users, {\n    fields: [projects.verifiedBy],\n    references: [users.id],\n    relationName: \"verified_projects\",\n  }),\n  fieldData: many(fieldData),\n  auditLogs: many(auditLogs),\n}));\n\nexport const fieldDataRelations = relations(fieldData, ({ one }) => ({\n  project: one(projects, {\n    fields: [fieldData.projectId],\n    references: [projects.id],\n  }),\n}));\n\nexport const auditLogsRelations = relations(auditLogs, ({ one }) => ({\n  project: one(projects, {\n    fields: [auditLogs.projectId],\n    references: [projects.id],\n  }),\n  user: one(users, {\n    fields: [auditLogs.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const aiVerificationJobsRelations = relations(aiVerificationJobs, ({ one }) => ({\n  project: one(projects, {\n    fields: [aiVerificationJobs.projectId],\n    references: [projects.id],\n  }),\n  fieldData: one(fieldData, {\n    fields: [aiVerificationJobs.fieldDataId],\n    references: [fieldData.id],\n  }),\n}));\n\nexport const gisSnapshotsRelations = relations(gisSnapshots, ({ one }) => ({\n  project: one(projects, {\n    fields: [gisSnapshots.projectId],\n    references: [projects.id],\n  }),\n}));\n\nexport const nftCertificatesRelations = relations(nftCertificates, ({ one }) => ({\n  project: one(projects, {\n    fields: [nftCertificates.projectId],\n    references: [projects.id],\n  }),\n}));\n\nexport const registryLocksRelations = relations(registryLocks, ({ one }) => ({\n  project: one(projects, {\n    fields: [registryLocks.projectId],\n    references: [projects.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertProjectSchema = createInsertSchema(projects).omit({\n  id: true,\n  createdAt: true,\n  verifiedAt: true,\n  verifiedBy: true,\n  carbonCredits: true,\n  blockchainTxHash: true,\n  status: true,\n});\n\nexport const insertFieldDataSchema = createInsertSchema(fieldData).omit({\n  id: true,\n  uploadedAt: true,\n});\n\nexport const insertAuditLogSchema = createInsertSchema(auditLogs).omit({\n  id: true,\n  timestamp: true,\n});\n\nexport const insertAiVerificationJobSchema = createInsertSchema(aiVerificationJobs).omit({\n  id: true,\n  createdAt: true,\n  completedAt: true,\n});\n\nexport const insertGisSnapshotSchema = createInsertSchema(gisSnapshots).omit({\n  id: true,\n  verifiedAt: true,\n});\n\nexport const insertNftCertificateSchema = createInsertSchema(nftCertificates).omit({\n  id: true,\n  mintedAt: true,\n});\n\nexport const insertRegistryLockSchema = createInsertSchema(registryLocks).omit({\n  id: true,\n  lockedAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type Project = typeof projects.$inferSelect;\nexport type FieldData = typeof fieldData.$inferSelect;\nexport type AuditLog = typeof auditLogs.$inferSelect;\nexport type AiVerificationJob = typeof aiVerificationJobs.$inferSelect;\nexport type GisSnapshot = typeof gisSnapshots.$inferSelect;\nexport type NftCertificate = typeof nftCertificates.$inferSelect;\nexport type RegistryLock = typeof registryLocks.$inferSelect;\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type InsertProject = z.infer<typeof insertProjectSchema>;\nexport type InsertFieldData = z.infer<typeof insertFieldDataSchema>;\nexport type InsertAuditLog = z.infer<typeof insertAuditLogSchema>;\nexport type InsertAiVerificationJob = z.infer<typeof insertAiVerificationJobSchema>;\nexport type InsertGisSnapshot = z.infer<typeof insertGisSnapshotSchema>;\nexport type InsertNftCertificate = z.infer<typeof insertNftCertificateSchema>;\nexport type InsertRegistryLock = z.infer<typeof insertRegistryLockSchema>;\n","size_bytes":9462},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Navbar from \"@/components/navbar\";\nimport Home from \"@/pages/home\";\nimport NGODashboard from \"@/pages/ngo-dashboard\";\nimport AdminDashboard from \"@/pages/admin-dashboard\";\nimport IndustryDashboard from \"@/pages/industry-dashboard\";\nimport GovDashboard from \"@/pages/gov-dashboard\";\nimport MapView from \"@/pages/map-view\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <>\n      <Navbar />\n      <Switch>\n        <Route path=\"/\" component={Home} />\n        <Route path=\"/ngo-dashboard\" component={NGODashboard} />\n        <Route path=\"/admin-dashboard\" component={AdminDashboard} />\n        <Route path=\"/industry-dashboard\" component={IndustryDashboard} />\n        <Route path=\"/gov-dashboard\" component={GovDashboard} />\n        <Route path=\"/map\" component={MapView} />\n        <Route component={NotFound} />\n      </Switch>\n    </>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1359},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 20%, 98%);\n  --foreground: hsl(224, 71%, 4%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(224, 71%, 4%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(224, 71%, 4%);\n  --primary: hsl(174, 100%, 29%);\n  --primary-foreground: hsl(0, 0%, 98%);\n  --secondary: hsl(102, 55%, 53%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --muted: hsl(220, 14%, 96%);\n  --muted-foreground: hsl(220, 8%, 46%);\n  --accent: hsl(220, 14%, 96%);\n  --accent-foreground: hsl(220, 9%, 46%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --border: hsl(220, 13%, 91%);\n  --input: hsl(220, 13%, 91%);\n  --ring: hsl(174, 100%, 29%);\n  --chart-1: hsl(174, 100%, 29%);\n  --chart-2: hsl(102, 55%, 53%);\n  --chart-3: hsl(42, 92%, 56%);\n  --chart-4: hsl(147, 78%, 42%);\n  --chart-5: hsl(341, 75%, 51%);\n  --sidebar: hsl(0, 0%, 100%);\n  --sidebar-foreground: hsl(224, 71%, 4%);\n  --sidebar-primary: hsl(174, 100%, 29%);\n  --sidebar-primary-foreground: hsl(0, 0%, 98%);\n  --sidebar-accent: hsl(220, 14%, 96%);\n  --sidebar-accent-foreground: hsl(220, 9%, 46%);\n  --sidebar-border: hsl(220, 13%, 91%);\n  --sidebar-ring: hsl(174, 100%, 29%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 8px;\n  --shadow-2xs: 0px 2px 0px 0px hsl(174, 100%, 29%, 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(174, 100%, 29%, 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(174, 100%, 29%, 0.00), 0px 1px 2px -1px hsl(174, 100%, 29%, 0.00);\n  --shadow: 0px 2px 0px 0px hsl(174, 100%, 29%, 0.00), 0px 1px 2px -1px hsl(174, 100%, 29%, 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(174, 100%, 29%, 0.00), 0px 2px 4px -1px hsl(174, 100%, 29%, 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(174, 100%, 29%, 0.00), 0px 4px 6px -1px hsl(174, 100%, 29%, 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(174, 100%, 29%, 0.00), 0px 8px 10px -1px hsl(174, 100%, 29%, 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(174, 100%, 29%, 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(224, 71%, 4%);\n  --foreground: hsl(210, 20%, 98%);\n  --card: hsl(228, 10%, 10%);\n  --card-foreground: hsl(210, 20%, 98%);\n  --popover: hsl(228, 10%, 10%);\n  --popover-foreground: hsl(210, 20%, 98%);\n  --primary: hsl(174, 100%, 29%);\n  --primary-foreground: hsl(0, 0%, 98%);\n  --secondary: hsl(102, 55%, 53%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --muted: hsl(220, 8%, 15%);\n  --muted-foreground: hsl(220, 8%, 46%);\n  --accent: hsl(220, 8%, 15%);\n  --accent-foreground: hsl(220, 9%, 80%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --border: hsl(220, 8%, 20%);\n  --input: hsl(220, 8%, 20%);\n  --ring: hsl(174, 100%, 29%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n.leaflet-container {\n  height: 400px;\n  width: 100%;\n  border-radius: var(--radius);\n}\n","size_bytes":3135},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/navbar.tsx":{"content":"import { Link } from \"wouter\";\nimport { Leaf } from \"lucide-react\";\nimport WalletConnect from \"./wallet-connect.tsx\";\n\nexport default function Navbar() {\n  return (\n    <nav className=\"bg-card border-b border-border sticky top-0 z-50\" data-testid=\"navbar\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          <Link href=\"/\" className=\"flex items-center space-x-2\" data-testid=\"link-home\">\n            <Leaf className=\"text-primary text-2xl\" />\n            <span className=\"text-xl font-bold text-foreground\">BlueCarbon MRV</span>\n          </Link>\n          \n          <div className=\"hidden md:flex items-center space-x-6\">\n            <Link href=\"/\" className=\"text-muted-foreground hover:text-primary transition-colors\" data-testid=\"link-home-nav\">\n              Home\n            </Link>\n            <Link href=\"/map\" className=\"text-muted-foreground hover:text-primary transition-colors\" data-testid=\"link-map\">\n              Map\n            </Link>\n            <Link href=\"/ngo-dashboard\" className=\"text-muted-foreground hover:text-primary transition-colors\" data-testid=\"link-ngo-dashboard\">\n              NGO Dashboard\n            </Link>\n            <Link href=\"/industry-dashboard\" className=\"text-muted-foreground hover:text-primary transition-colors\" data-testid=\"link-industry-dashboard\">\n              Industry Dashboard\n            </Link>\n            <Link href=\"/gov-dashboard\" className=\"text-muted-foreground hover:text-primary transition-colors\" data-testid=\"link-gov-dashboard\">\n              Government Analytics\n            </Link>\n            <Link href=\"/admin-dashboard\" className=\"text-muted-foreground hover:text-primary transition-colors\" data-testid=\"link-admin-dashboard\">\n              Admin Dashboard\n            </Link>\n          </div>\n\n          <WalletConnect />\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":1932},"client/src/components/wallet-connect.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Wallet } from \"lucide-react\";\nimport { useWallet } from \"@/hooks/use-wallet\";\n\nexport default function WalletConnect() {\n  const { account, isConnected, isConnecting, connect, disconnect } = useWallet();\n\n  if (isConnected && account) {\n    return (\n      <div className=\"flex items-center space-x-3\" data-testid=\"wallet-status\">\n        <div className=\"flex items-center space-x-2 bg-accent px-3 py-2 rounded-lg\">\n          <div className=\"w-2 h-2 bg-secondary rounded-full\"></div>\n          <span className=\"text-sm font-medium\">\n            {account.slice(0, 6)}...{account.slice(-4)}\n          </span>\n        </div>\n        <Button \n          variant=\"outline\" \n          size=\"sm\" \n          onClick={disconnect}\n          data-testid=\"button-disconnect\"\n        >\n          Disconnect\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <Button \n      onClick={connect} \n      disabled={isConnecting}\n      className=\"bg-primary text-primary-foreground hover:bg-primary/90\"\n      data-testid=\"button-connect-wallet\"\n    >\n      <Wallet className=\"mr-2 h-4 w-4\" />\n      {isConnecting ? \"Connecting...\" : \"Connect Wallet\"}\n    </Button>\n  );\n}\n","size_bytes":1248},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/use-wallet.ts":{"content":"import { useState, useEffect } from \"react\";\nimport { ethers, BrowserProvider } from \"ethers\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ndeclare global {\n  interface Window {\n    ethereum?: any;\n  }\n}\n\nexport function useWallet() {\n  const [account, setAccount] = useState<string | null>(null);\n  const [provider, setProvider] = useState<BrowserProvider | null>(null);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const { toast } = useToast();\n\n  const isConnected = !!account;\n\n  useEffect(() => {\n    // Check if already connected\n    checkConnection();\n    \n    // Listen for account changes\n    if (window.ethereum) {\n      window.ethereum.on(\"accountsChanged\", handleAccountsChanged);\n      window.ethereum.on(\"chainChanged\", () => {\n        window.location.reload();\n      });\n    }\n\n    return () => {\n      if (window.ethereum) {\n        window.ethereum.removeListener(\"accountsChanged\", handleAccountsChanged);\n      }\n    };\n  }, []);\n\n  const checkConnection = async () => {\n    if (window.ethereum) {\n      try {\n        const provider = new BrowserProvider(window.ethereum);\n        const accounts = await provider.listAccounts();\n        if (accounts.length > 0) {\n          const address = typeof accounts[0] === 'string' ? accounts[0] : accounts[0].address;\n          setAccount(address);\n          setProvider(provider);\n          await registerUser(address);\n        }\n      } catch (error) {\n        console.error(\"Error checking connection:\", error);\n      }\n    }\n  };\n\n  const handleAccountsChanged = (accounts: string[]) => {\n    if (accounts.length === 0) {\n      setAccount(null);\n      setProvider(null);\n    } else {\n      setAccount(accounts[0]);\n      registerUser(accounts[0]);\n    }\n  };\n\n  const registerUser = async (walletAddress: string) => {\n    try {\n      await apiRequest(\"POST\", \"/api/auth/wallet\", {\n        walletAddress,\n        role: \"ngo\", // Default role\n      });\n    } catch (error) {\n      console.error(\"Error registering user:\", error);\n    }\n  };\n\n  const connect = async () => {\n    if (!window.ethereum) {\n      toast({\n        title: \"MetaMask not found\",\n        description: \"Please install MetaMask to connect your wallet.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsConnecting(true);\n    try {\n      const provider = new BrowserProvider(window.ethereum);\n      await provider.send(\"eth_requestAccounts\", []);\n      const signer = await provider.getSigner();\n      const address = await signer.getAddress();\n      \n      setAccount(address);\n      setProvider(provider);\n      await registerUser(address);\n\n      toast({\n        title: \"Wallet connected\",\n        description: `Connected to ${address.slice(0, 6)}...${address.slice(-4)}`,\n      });\n    } catch (error: any) {\n      console.error(\"Error connecting wallet:\", error);\n      toast({\n        title: \"Connection failed\",\n        description: error.message || \"Failed to connect wallet\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsConnecting(false);\n    }\n  };\n\n  const disconnect = () => {\n    setAccount(null);\n    setProvider(null);\n    toast({\n      title: \"Wallet disconnected\",\n      description: \"Your wallet has been disconnected.\",\n    });\n  };\n\n  return {\n    account,\n    provider,\n    isConnected,\n    isConnecting,\n    connect,\n    disconnect,\n  };\n}\n","size_bytes":3407},"client/src/lib/ipfs.ts":{"content":"// Using mock IPFS implementation due to dependency conflicts\n// import { Web3Storage } from \"web3.storage\";\n\nconst WEB3_STORAGE_TOKEN = process.env.VITE_WEB3_STORAGE_TOKEN || \"\";\n\nif (!WEB3_STORAGE_TOKEN) {\n  console.warn(\"Web3.storage token not found. File uploads will be simulated.\");\n}\n\nexport class IPFSService {\n  private client: any = null; // Mock implementation\n\n  constructor() {\n    // Mock implementation for testing\n    this.client = null;\n  }\n\n  async uploadFile(file: File, metadata?: any): Promise<string> {\n    if (!this.client) {\n      // Simulate IPFS upload for development\n      return `Qm${Math.random().toString(36).substring(2, 15)}`;\n    }\n\n    try {\n      // Create metadata file\n      const metadataFile = new File(\n        [JSON.stringify({ ...metadata, originalName: file.name, uploadedAt: new Date().toISOString() })],\n        `${file.name}.metadata.json`,\n        { type: \"application/json\" }\n      );\n\n      const cid = await this.client.put([file, metadataFile], {\n        name: `bluecarbon-${file.name}-${Date.now()}`,\n        maxRetries: 3,\n      });\n\n      return cid;\n    } catch (error) {\n      console.error(\"Error uploading to IPFS:\", error);\n      throw new Error(\"Failed to upload file to IPFS\");\n    }\n  }\n\n  async uploadMultipleFiles(files: File[], metadata?: any): Promise<string[]> {\n    const uploadPromises = files.map(file => this.uploadFile(file, metadata));\n    return Promise.all(uploadPromises);\n  }\n\n  getIPFSUrl(cid: string, filename?: string): string {\n    if (filename) {\n      return `https://${cid}.ipfs.w3s.link/${filename}`;\n    }\n    return `https://${cid}.ipfs.w3s.link/`;\n  }\n}\n\nexport const ipfsService = new IPFSService();\n","size_bytes":1690},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/lib/web3.ts":{"content":"import { ethers, BrowserProvider, Contract, formatEther, parseEther, keccak256, toUtf8Bytes } from \"ethers\";\n\n// BlueCarbon Token Contract ABI (simplified)\nconst BLUECARBON_ABI = [\n  \"function balanceOf(address owner) view returns (uint256)\",\n  \"function mint(address to, uint256 amount) external\",\n  \"function burn(uint256 amount) external\",\n  \"function transfer(address to, uint256 amount) external returns (bool)\",\n  \"function hasRole(bytes32 role, address account) view returns (bool)\",\n  \"function grantRole(bytes32 role, address account) external\",\n  \"event Transfer(address indexed from, address indexed to, uint256 value)\",\n  \"event ProjectVerified(string indexed projectId, uint256 creditsIssued)\",\n];\n\n// Contract address (will be set after deployment)\nconst CONTRACT_ADDRESS = import.meta.env.VITE_CONTRACT_ADDRESS as string;\n\n// Role hashes\nconst ADMIN_ROLE = keccak256(toUtf8Bytes(\"ADMIN_ROLE\"));\nconst NGO_ROLE = keccak256(toUtf8Bytes(\"NGO_ROLE\"));\n\nexport class Web3Service {\n  private provider: BrowserProvider;\n  private contract: Contract;\n\n  constructor(provider: BrowserProvider) {\n    this.provider = provider;\n    this.contract = new Contract(CONTRACT_ADDRESS, BLUECARBON_ABI, provider);\n  }\n\n  async getCarbonCredits(address: string): Promise<string> {\n    try {\n      const balance = await this.contract.balanceOf(address);\n      return formatEther(balance);\n    } catch (error) {\n      console.error(\"Error getting carbon credits:\", error);\n      return \"0\";\n    }\n  }\n\n  async mintCredits(projectId: string, amount: string, recipientAddress: string): Promise<string> {\n    try {\n      const signer = await this.provider.getSigner();\n      const contractWithSigner = this.contract.connect(signer) as any;\n      \n      const amountWei = parseEther(amount);\n      const tx = await contractWithSigner.mint(recipientAddress, amountWei);\n      \n      await tx.wait();\n      return tx.hash;\n    } catch (error) {\n      console.error(\"Error minting credits:\", error);\n      throw error;\n    }\n  }\n\n  async burnCredits(amount: string): Promise<string> {\n    try {\n      const signer = await this.provider.getSigner();\n      const contractWithSigner = this.contract.connect(signer) as any;\n      \n      const amountWei = parseEther(amount);\n      const tx = await contractWithSigner.burn(amountWei);\n      \n      await tx.wait();\n      return tx.hash;\n    } catch (error) {\n      console.error(\"Error burning credits:\", error);\n      throw error;\n    }\n  }\n\n  async transferCredits(to: string, amount: string): Promise<string> {\n    try {\n      const signer = await this.provider.getSigner();\n      const contractWithSigner = this.contract.connect(signer) as any;\n      \n      const amountWei = parseEther(amount);\n      const tx = await contractWithSigner.transfer(to, amountWei);\n      \n      await tx.wait();\n      return tx.hash;\n    } catch (error) {\n      console.error(\"Error transferring credits:\", error);\n      throw error;\n    }\n  }\n\n  async hasRole(role: \"admin\" | \"ngo\", address: string): Promise<boolean> {\n    try {\n      const roleHash = role === \"admin\" ? ADMIN_ROLE : NGO_ROLE;\n      return await this.contract.hasRole(roleHash, address);\n    } catch (error) {\n      console.error(\"Error checking role:\", error);\n      return false;\n    }\n  }\n}\n","size_bytes":3279},"client/src/pages/admin-dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Clock, CheckCircle, Coins, Globe, Check, X, Eye, FolderOutput } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useWallet } from \"@/hooks/use-wallet\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\n\nexport default function AdminDashboard() {\n  const { account } = useWallet();\n  const { toast } = useToast();\n  const [verifyingProject, setVerifyingProject] = useState<string | null>(null);\n  const [carbonCredits, setCarbonCredits] = useState(\"\");\n\n  // Get pending projects\n  const { data: pendingData, isLoading: loadingPending } = useQuery({\n    queryKey: [\"/api/projects\", \"pending\"],\n    enabled: !!account,\n  });\n\n  // Get all projects for stats\n  const { data: allProjectsData } = useQuery({\n    queryKey: [\"/api/projects\"],\n    enabled: !!account,\n  });\n\n  const projects = (allProjectsData as any)?.projects || [];\n  const pendingProjects = (pendingData as any)?.projects || [];\n  const verifiedProjects = projects.filter((p: any) => p.status === \"verified\");\n  const totalCredits = verifiedProjects.reduce((sum: number, p: any) => sum + parseFloat(p.carbonCredits || \"0\"), 0);\n  const totalArea = verifiedProjects.reduce((sum: number, p: any) => sum + parseFloat(p.areaHectares || \"0\"), 0);\n\n  const verifyProjectMutation = useMutation({\n    mutationFn: ({ projectId, status, credits }: { projectId: string; status: \"verified\" | \"rejected\"; credits?: string }) =>\n      apiRequest(\"POST\", `/api/projects/${projectId}/verify`, {\n        status,\n        verifiedBy: account,\n        carbonCredits: credits,\n        blockchainTxHash: `0x${Math.random().toString(16).substr(2, 64)}`, // Mock transaction hash\n      }),\n    onSuccess: (_, variables) => {\n      toast({\n        title: variables.status === \"verified\" ? \"Project verified successfully!\" : \"Project rejected\",\n        description: variables.status === \"verified\" ? `Carbon credits will be minted.` : \"The project has been rejected.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/projects\"] });\n      setVerifyingProject(null);\n      setCarbonCredits(\"\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error processing project\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleVerify = (projectId: string) => {\n    if (!carbonCredits) {\n      toast({\n        title: \"Carbon credits required\",\n        description: \"Please enter the number of carbon credits to mint.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    verifyProjectMutation.mutate({ projectId, status: \"verified\", credits: carbonCredits });\n  };\n\n  const handleReject = (projectId: string) => {\n    verifyProjectMutation.mutate({ projectId, status: \"rejected\" });\n  };\n\n  if (!account) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <Card className=\"w-full max-w-md\">\n          <CardContent className=\"pt-6 text-center\">\n            <h2 className=\"text-2xl font-bold mb-4\">Connect Your Wallet</h2>\n            <p className=\"text-muted-foreground mb-4\">\n              Please connect your wallet to access the admin dashboard.\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"py-12 bg-muted/30 min-h-screen\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center mb-8\">\n          <div>\n            <h1 className=\"text-3xl font-bold\">Admin Dashboard</h1>\n            <p className=\"text-muted-foreground mt-2\">Review and verify blue carbon projects</p>\n          </div>\n          <Button variant=\"outline\" data-testid=\"button-export-report\">\n            <FolderOutput className=\"mr-2 h-4 w-4\" />\n            Export Report\n          </Button>\n        </div>\n\n        {/* Admin Stats */}\n        <div className=\"grid md:grid-cols-4 gap-6 mb-8\">\n          <Card data-testid=\"stat-pending-review\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-muted-foreground text-sm\">Pending Review</p>\n                  <p className=\"text-2xl font-bold text-secondary\">{pendingProjects.length}</p>\n                </div>\n                <Clock className=\"text-secondary text-2xl\" />\n              </div>\n            </CardContent>\n          </Card>\n          <Card data-testid=\"stat-verified-projects\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-muted-foreground text-sm\">Verified Projects</p>\n                  <p className=\"text-2xl font-bold text-primary\">{verifiedProjects.length}</p>\n                </div>\n                <CheckCircle className=\"text-primary text-2xl\" />\n              </div>\n            </CardContent>\n          </Card>\n          <Card data-testid=\"stat-credits-minted\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-muted-foreground text-sm\">Credits Minted</p>\n                  <p className=\"text-2xl font-bold text-primary\">{totalCredits.toFixed(0)}</p>\n                </div>\n                <Coins className=\"text-primary text-2xl\" />\n              </div>\n            </CardContent>\n          </Card>\n          <Card data-testid=\"stat-total-area\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-muted-foreground text-sm\">Total Area</p>\n                  <p className=\"text-2xl font-bold text-secondary\">{totalArea.toFixed(0)} ha</p>\n                </div>\n                <Globe className=\"text-secondary text-2xl\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Project Review Queue */}\n        <Card data-testid=\"project-review-queue\">\n          <CardHeader>\n            <CardTitle>Project Review Queue</CardTitle>\n            <p className=\"text-muted-foreground\">Review and verify submitted projects</p>\n          </CardHeader>\n          <CardContent>\n            {loadingPending ? (\n              <div className=\"space-y-6\">\n                {[1, 2].map(i => (\n                  <div key={i} className=\"border-b border-border pb-6 animate-pulse\">\n                    <div className=\"h-6 bg-muted rounded w-1/3 mb-4\"></div>\n                    <div className=\"h-4 bg-muted rounded w-full mb-2\"></div>\n                    <div className=\"h-4 bg-muted rounded w-2/3\"></div>\n                  </div>\n                ))}\n              </div>\n            ) : pendingProjects.length === 0 ? (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                <CheckCircle className=\"mx-auto h-12 w-12 mb-4\" />\n                <p>No projects pending review.</p>\n                <p className=\"text-sm\">All submitted projects have been processed.</p>\n              </div>\n            ) : (\n              <div className=\"divide-y divide-border\">\n                {pendingProjects.map((project: any) => (\n                  <div key={project.id} className=\"py-6\" data-testid={`project-review-${project.id}`}>\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center space-x-3 mb-3\">\n                          <h4 className=\"font-semibold\">{project.name}</h4>\n                          <Badge variant=\"secondary\">High Priority</Badge>\n                        </div>\n                        <div className=\"grid md:grid-cols-2 gap-4 mb-4\">\n                          <div>\n                            <p className=\"text-sm text-muted-foreground\">\n                              Location: <span className=\"font-medium\">{project.location} ({project.latitude}, {project.longitude})</span>\n                            </p>\n                            <p className=\"text-sm text-muted-foreground\">\n                              Area: <span className=\"font-medium\">{project.areaHectares} hectares</span>\n                            </p>\n                            <p className=\"text-sm text-muted-foreground\">\n                              Type: <span className=\"font-medium\">{project.projectType}</span>\n                            </p>\n                          </div>\n                          <div>\n                            <p className=\"text-sm text-muted-foreground\">\n                              Submitted: <span className=\"font-medium\">{new Date(project.createdAt).toLocaleDateString()}</span>\n                            </p>\n                            <p className=\"text-sm text-muted-foreground mb-2\">\n                              Description: <span className=\"font-medium\">{project.description}</span>\n                            </p>\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"flex flex-col space-y-2 ml-6\">\n                        <Dialog>\n                          <DialogTrigger asChild>\n                            <Button \n                              className=\"bg-primary text-primary-foreground hover:bg-primary/90\"\n                              data-testid={`button-approve-${project.id}`}\n                            >\n                              <Check className=\"mr-2 h-4 w-4\" />\n                              Approve & Mint\n                            </Button>\n                          </DialogTrigger>\n                          <DialogContent>\n                            <DialogHeader>\n                              <DialogTitle>Verify Project & Mint Credits</DialogTitle>\n                            </DialogHeader>\n                            <div className=\"space-y-4\">\n                              <div>\n                                <Label htmlFor=\"carbon-credits\">Carbon Credits to Mint</Label>\n                                <Input\n                                  id=\"carbon-credits\"\n                                  type=\"number\"\n                                  placeholder=\"Enter carbon credits amount\"\n                                  value={carbonCredits}\n                                  onChange={(e) => setCarbonCredits(e.target.value)}\n                                  data-testid=\"input-carbon-credits\"\n                                />\n                              </div>\n                              <div className=\"flex space-x-2\">\n                                <Button \n                                  onClick={() => handleVerify(project.id)}\n                                  disabled={verifyProjectMutation.isPending}\n                                  data-testid=\"button-confirm-verify\"\n                                >\n                                  {verifyProjectMutation.isPending ? \"Processing...\" : \"Verify & Mint\"}\n                                </Button>\n                                <DialogTrigger asChild>\n                                  <Button variant=\"outline\">Cancel</Button>\n                                </DialogTrigger>\n                              </div>\n                            </div>\n                          </DialogContent>\n                        </Dialog>\n                        \n                        <Button \n                          variant=\"destructive\"\n                          onClick={() => handleReject(project.id)}\n                          disabled={verifyProjectMutation.isPending}\n                          data-testid={`button-reject-${project.id}`}\n                        >\n                          <X className=\"mr-2 h-4 w-4\" />\n                          Reject\n                        </Button>\n                        \n                        <Button variant=\"outline\" data-testid={`button-review-${project.id}`}>\n                          <Eye className=\"mr-2 h-4 w-4\" />\n                          Review\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":12798},"client/src/pages/gov-dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, LineChart, Line, PieChart, Pie, Cell } from \"recharts\";\nimport { Globe, TrendingUp, Users, MapPin, AlertTriangle, CheckCircle } from \"lucide-react\";\n\ninterface PolicyInsight {\n  id: string;\n  title: string;\n  description: string;\n  impact: \"high\" | \"medium\" | \"low\";\n  region: string;\n  recommendations: string[];\n}\n\ninterface ProjectStats {\n  region: string;\n  projectsCount: number;\n  areaRestored: number;\n  carbonStored: number;\n  communities: number;\n}\n\nexport default function GovDashboard() {\n  // Fetch national statistics\n  const { data: nationalStats = {} } = useQuery<{\n    totalCarbonStock?: number;\n    yearOverYearGrowth?: number;\n    verifiedProjects?: number;\n    pendingVerification?: number;\n    totalAreaRestored?: number;\n    regions?: number;\n    communitiesEngaged?: number;\n    ngoPartners?: number;\n  }>({\n    queryKey: [\"/api/government/national-stats\"],\n  });\n\n  // Fetch regional breakdown\n  const { data: regionalData = [] } = useQuery<ProjectStats[]>({\n    queryKey: [\"/api/government/regional-data\"],\n  });\n\n  // Fetch policy insights\n  const { data: policyInsights = [] } = useQuery<PolicyInsight[]>({\n    queryKey: [\"/api/government/policy-insights\"],\n  });\n\n  // Fetch carbon trend data\n  const { data: carbonTrends = [] } = useQuery<{month: string; carbonStored: number}[]>({\n    queryKey: [\"/api/government/carbon-trends\"],\n  });\n\n  // Fetch ecosystem distribution\n  const { data: ecosystemData = [] } = useQuery<{name: string; area: number}[]>({\n    queryKey: [\"/api/government/ecosystem-distribution\"],\n  });\n\n  const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042'];\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-8\" data-testid=\"gov-dashboard\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">Government Analytics Dashboard</h1>\n          <p className=\"text-gray-600 dark:text-gray-300\">National Blue Carbon Monitoring & Policy Insights</p>\n        </div>\n        <Badge variant=\"outline\" className=\"text-lg px-4 py-2\">\n          <Globe className=\"w-4 h-4 mr-2\" />\n          NCCR Policy Analytics\n        </Badge>\n      </div>\n\n      {/* National Overview Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Carbon Stock</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"total-carbon-stock\">\n              {nationalStats.totalCarbonStock?.toLocaleString() || 0} tCO₂\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              +{nationalStats.yearOverYearGrowth || 0}% from last year\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Verified Projects</CardTitle>\n            <CheckCircle className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"verified-projects\">\n              {nationalStats.verifiedProjects || 0}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              {nationalStats.pendingVerification || 0} pending verification\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Area Restored</CardTitle>\n            <MapPin className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"area-restored\">\n              {nationalStats.totalAreaRestored?.toLocaleString() || 0} ha\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Across {nationalStats.regions || 0} regions\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Communities Engaged</CardTitle>\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"communities-engaged\">\n              {nationalStats.communitiesEngaged || 0}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              {nationalStats.ngoPartners || 0} NGO partners\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Tabs defaultValue=\"analytics\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"analytics\" data-testid=\"tab-analytics\">Analytics</TabsTrigger>\n          <TabsTrigger value=\"regional\" data-testid=\"tab-regional\">Regional Data</TabsTrigger>\n          <TabsTrigger value=\"policy\" data-testid=\"tab-policy\">Policy Insights</TabsTrigger>\n          <TabsTrigger value=\"compliance\" data-testid=\"tab-compliance\">Compliance</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"analytics\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Carbon Storage Trends</CardTitle>\n                <CardDescription>Monthly carbon sequestration progress</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <LineChart data={carbonTrends}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"month\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"carbonStored\" \n                      stroke=\"#8884d8\" \n                      strokeWidth={2}\n                      name=\"Carbon Stored (tCO₂)\"\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Ecosystem Distribution</CardTitle>\n                <CardDescription>Blue carbon ecosystems by area</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <PieChart>\n                    <Pie\n                      data={ecosystemData}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      labelLine={false}\n                      label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}\n                      outerRadius={80}\n                      fill=\"#8884d8\"\n                      dataKey=\"area\"\n                    >\n                      {ecosystemData.map((entry, index: number) => (\n                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                      ))}\n                    </Pie>\n                    <Tooltip />\n                  </PieChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Regional Performance</CardTitle>\n              <CardDescription>Projects and restoration area by region</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={400}>\n                <BarChart data={regionalData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"region\" />\n                  <YAxis />\n                  <Tooltip />\n                  <Bar dataKey=\"projectsCount\" fill=\"#8884d8\" name=\"Projects\" />\n                  <Bar dataKey=\"areaRestored\" fill=\"#82ca9d\" name=\"Area Restored (ha)\" />\n                </BarChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"regional\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Regional Breakdown</CardTitle>\n              <CardDescription>Detailed statistics by administrative region</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Region</TableHead>\n                    <TableHead>Projects</TableHead>\n                    <TableHead>Area Restored (ha)</TableHead>\n                    <TableHead>Carbon Stored (tCO₂)</TableHead>\n                    <TableHead>Communities</TableHead>\n                    <TableHead>Progress</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {regionalData.map((region) => (\n                    <TableRow key={region.region}>\n                      <TableCell className=\"font-medium\">{region.region}</TableCell>\n                      <TableCell>{region.projectsCount}</TableCell>\n                      <TableCell>{region.areaRestored.toLocaleString()}</TableCell>\n                      <TableCell>{region.carbonStored.toLocaleString()}</TableCell>\n                      <TableCell>{region.communities}</TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center space-x-2\">\n                          <Progress \n                            value={(region.areaRestored / 1000) * 100} \n                            className=\"w-20\" \n                          />\n                          <span className=\"text-sm\">\n                            {Math.round((region.areaRestored / 1000) * 100)}%\n                          </span>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"policy\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Policy Insights & Recommendations</CardTitle>\n              <CardDescription>AI-generated insights for policy development</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {policyInsights.map((insight) => (\n                <div key={insight.id} className=\"border rounded-lg p-4 space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <h3 className=\"text-lg font-semibold\">{insight.title}</h3>\n                    <div className=\"flex items-center space-x-2\">\n                      <Badge \n                        variant={insight.impact === 'high' ? 'destructive' : \n                                insight.impact === 'medium' ? 'default' : 'secondary'}\n                      >\n                        {insight.impact} impact\n                      </Badge>\n                      <Badge variant=\"outline\">{insight.region}</Badge>\n                    </div>\n                  </div>\n                  <p className=\"text-gray-600 dark:text-gray-300\">{insight.description}</p>\n                  <div>\n                    <h4 className=\"font-medium text-sm mb-2\">Recommendations:</h4>\n                    <ul className=\"list-disc list-inside space-y-1 text-sm\">\n                      {insight.recommendations.map((rec, index) => (\n                        <li key={index} className=\"text-gray-700 dark:text-gray-400\">{rec}</li>\n                      ))}\n                    </ul>\n                  </div>\n                </div>\n              ))}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"compliance\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Verification Compliance</CardTitle>\n                <CardDescription>Project verification status overview</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <span>AI Verification Pass Rate</span>\n                    <div className=\"flex items-center space-x-2\">\n                      <Progress value={92} className=\"w-20\" />\n                      <span className=\"text-sm font-medium\">92%</span>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span>GIS Validation Accuracy</span>\n                    <div className=\"flex items-center space-x-2\">\n                      <Progress value={87} className=\"w-20\" />\n                      <span className=\"text-sm font-medium\">87%</span>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span>Double-counting Prevention</span>\n                    <div className=\"flex items-center space-x-2\">\n                      <Progress value={100} className=\"w-20\" />\n                      <span className=\"text-sm font-medium\">100%</span>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Quality Alerts</CardTitle>\n                <CardDescription>Issues requiring attention</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center space-x-3 p-3 bg-yellow-50 dark:bg-yellow-900/20 rounded-lg\">\n                    <AlertTriangle className=\"h-5 w-5 text-yellow-600\" />\n                    <div>\n                      <p className=\"text-sm font-medium\">Suspicious AI Results</p>\n                      <p className=\"text-xs text-gray-600\">3 projects flagged for manual review</p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-3 p-3 bg-green-50 dark:bg-green-900/20 rounded-lg\">\n                    <CheckCircle className=\"h-5 w-5 text-green-600\" />\n                    <div>\n                      <p className=\"text-sm font-medium\">GIS Validation Clean</p>\n                      <p className=\"text-xs text-gray-600\">All locations verified successfully</p>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":15613},"client/src/pages/home.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Sprout, Map, Upload, CheckCircle, Coins } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function Home() {\n  return (\n    <div className=\"min-h-screen\">\n      {/* Hero Section */}\n      <section className=\"py-20 bg-gradient-to-br from-primary/5 to-secondary/5\" data-testid=\"hero-section\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center\">\n            <h1 className=\"text-5xl font-bold text-foreground mb-6\">\n              Restore Our Blue Planet\n            </h1>\n            <p className=\"text-xl text-muted-foreground mb-8 max-w-3xl mx-auto\">\n              Monitor, Report, and Verify blue carbon restoration projects through blockchain technology. \n              Earn tokenized carbon credits for verified mangrove and coastal ecosystem restoration.\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Link href=\"/ngo-dashboard\">\n                <Button size=\"lg\" className=\"bg-primary text-primary-foreground hover:bg-primary/90\" data-testid=\"button-register-project\">\n                  <Sprout className=\"mr-2 h-5 w-5\" />\n                  Register Project\n                </Button>\n              </Link>\n              <Link href=\"/map\">\n                <Button size=\"lg\" variant=\"outline\" data-testid=\"button-explore-map\">\n                  <Map className=\"mr-2 h-5 w-5\" />\n                  Explore Map\n                </Button>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section className=\"py-20\" data-testid=\"features-section\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <h2 className=\"text-3xl font-bold text-center mb-12\">How It Works</h2>\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            <div className=\"bg-card p-6 rounded-xl shadow-sm border border-border\" data-testid=\"feature-submit\">\n              <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center mb-4\">\n                <Upload className=\"text-primary text-xl\" />\n              </div>\n              <h3 className=\"text-xl font-semibold mb-3\">Submit Project</h3>\n              <p className=\"text-muted-foreground\">NGOs register restoration projects with geo-tagged photos and field data stored on IPFS.</p>\n            </div>\n            <div className=\"bg-card p-6 rounded-xl shadow-sm border border-border\" data-testid=\"feature-verify\">\n              <div className=\"w-12 h-12 bg-secondary/10 rounded-lg flex items-center justify-center mb-4\">\n                <CheckCircle className=\"text-secondary text-xl\" />\n              </div>\n              <h3 className=\"text-xl font-semibold mb-3\">Verify & Approve</h3>\n              <p className=\"text-muted-foreground\">Certified administrators review projects and approve verified restoration efforts.</p>\n            </div>\n            <div className=\"bg-card p-6 rounded-xl shadow-sm border border-border\" data-testid=\"feature-earn\">\n              <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center mb-4\">\n                <Coins className=\"text-primary text-xl\" />\n              </div>\n              <h3 className=\"text-xl font-semibold mb-3\">Earn Credits</h3>\n              <p className=\"text-muted-foreground\">Smart contracts mint tokenized carbon credits that can be transferred or retired.</p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-card border-t border-border py-12\" data-testid=\"footer\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid md:grid-cols-4 gap-8\">\n            <div className=\"col-span-2\">\n              <div className=\"flex items-center space-x-2 mb-4\">\n                <Sprout className=\"text-primary text-2xl\" />\n                <span className=\"text-xl font-bold\">BlueCarbon MRV</span>\n              </div>\n              <p className=\"text-muted-foreground mb-4\">\n                Blockchain-powered monitoring, reporting, and verification of blue carbon restoration projects.\n              </p>\n            </div>\n            <div>\n              <h4 className=\"font-semibold mb-4\">Platform</h4>\n              <ul className=\"space-y-2 text-muted-foreground\">\n                <li><Link href=\"/ngo-dashboard\" className=\"hover:text-primary\">NGO Dashboard</Link></li>\n                <li><Link href=\"/admin-dashboard\" className=\"hover:text-primary\">Admin Dashboard</Link></li>\n                <li><Link href=\"/map\" className=\"hover:text-primary\">Map</Link></li>\n              </ul>\n            </div>\n            <div>\n              <h4 className=\"font-semibold mb-4\">Resources</h4>\n              <ul className=\"space-y-2 text-muted-foreground\">\n                <li><a href=\"#\" className=\"hover:text-primary\">Documentation</a></li>\n                <li><a href=\"#\" className=\"hover:text-primary\">API</a></li>\n                <li><a href=\"#\" className=\"hover:text-primary\">Support</a></li>\n              </ul>\n            </div>\n          </div>\n          <div className=\"border-t border-border mt-8 pt-8 text-center text-muted-foreground\">\n            <p>&copy; 2024 BlueCarbon MRV Registry. Powered by blockchain technology.</p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":5444},"client/src/pages/industry-dashboard.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { toast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { ShoppingCart, Award, TrendingUp, Leaf, FileText, Download } from \"lucide-react\";\nimport { useState } from \"react\";\n\ninterface CarbonCredit {\n  id: string;\n  projectId: string;\n  projectName: string;\n  location: string;\n  ecosystem: string;\n  areaHectares: number;\n  creditsAvailable: number;\n  pricePerCredit: number;\n  nftTokenId?: number;\n  verifiedAt: string;\n  submitterOrg: string;\n}\n\ninterface PurchaseHistory {\n  id: string;\n  projectId: string;\n  projectName: string;\n  creditsRetired: number;\n  retirementReason: string;\n  retiredAt: string;\n  nftCertificateUrl?: string;\n}\n\nexport default function IndustryDashboard() {\n  const [selectedCredit, setSelectedCredit] = useState<CarbonCredit | null>(null);\n  const [purchaseAmount, setPurchaseAmount] = useState(0);\n\n  // Fetch available carbon credits\n  const { data: availableCredits = [], isLoading: loadingCredits } = useQuery<CarbonCredit[]>({\n    queryKey: [\"/api/credits/marketplace\"],\n  });\n\n  // Fetch purchase history\n  const { data: purchaseHistory = [], isLoading: loadingHistory } = useQuery<PurchaseHistory[]>({\n    queryKey: [\"/api/credits/purchase-history\"],\n  });\n\n  // Fetch industry statistics\n  const { data: stats = {} } = useQuery<{\n    totalCreditsPurchased?: number;\n    monthlyGrowth?: number;\n    totalCO2Offset?: number;\n    projectsSupported?: number;\n    countries?: number;\n    nftCertificates?: number;\n  }>({\n    queryKey: [\"/api/industry/stats\"],\n  });\n\n  // Purchase credits mutation\n  const purchaseMutation = useMutation({\n    mutationFn: async (data: { projectId: string; credits: number; retirementReason: string }) => {\n      const response = await fetch(\"/api/credits/purchase\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error(\"Purchase failed\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/credits/marketplace\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/credits/purchase-history\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/industry/stats\"] });\n      toast({\n        title: \"Credits Purchased Successfully\",\n        description: \"Your carbon credits have been retired and NFT certificate generated.\",\n      });\n      setSelectedCredit(null);\n      setPurchaseAmount(0);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Purchase Failed\",\n        description: error.message || \"Failed to purchase carbon credits\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handlePurchase = (retirementReason: string) => {\n    if (!selectedCredit || purchaseAmount <= 0) return;\n    \n    purchaseMutation.mutate({\n      projectId: selectedCredit.projectId,\n      credits: purchaseAmount,\n      retirementReason,\n    });\n  };\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-8\" data-testid=\"industry-dashboard\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">Industry Dashboard</h1>\n          <p className=\"text-gray-600 dark:text-gray-300\">Purchase verified carbon credits to offset your emissions</p>\n        </div>\n        <Badge variant=\"outline\" className=\"text-lg px-4 py-2\">\n          <Leaf className=\"w-4 h-4 mr-2\" />\n          Corporate Buyer\n        </Badge>\n      </div>\n\n      {/* Statistics Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Credits Purchased</CardTitle>\n            <ShoppingCart className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"total-credits-purchased\">\n              {stats.totalCreditsPurchased?.toLocaleString() || 0}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              +{stats.monthlyGrowth || 0}% from last month\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">CO2 Offset (tons)</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"co2-offset\">\n              {stats.totalCO2Offset?.toLocaleString() || 0}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Lifetime carbon footprint reduction\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Projects Supported</CardTitle>\n            <Award className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"projects-supported\">\n              {stats.projectsSupported || 0}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Across {stats.countries || 0} countries\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">NFT Certificates</CardTitle>\n            <FileText className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"nft-certificates\">\n              {stats.nftCertificates || 0}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Proof of offset certificates owned\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Tabs defaultValue=\"marketplace\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"marketplace\" data-testid=\"tab-marketplace\">Marketplace</TabsTrigger>\n          <TabsTrigger value=\"history\" data-testid=\"tab-history\">Purchase History</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"marketplace\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Available Carbon Credits</CardTitle>\n              <CardDescription>\n                Purchase verified blue carbon credits from restoration projects\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {loadingCredits ? (\n                <div className=\"text-center py-8\">Loading available credits...</div>\n              ) : (\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Project</TableHead>\n                      <TableHead>Location</TableHead>\n                      <TableHead>Ecosystem</TableHead>\n                      <TableHead>Area (ha)</TableHead>\n                      <TableHead>Credits Available</TableHead>\n                      <TableHead>Price per Credit</TableHead>\n                      <TableHead>Action</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {availableCredits.map((credit) => (\n                      <TableRow key={credit.id}>\n                        <TableCell className=\"font-medium\">{credit.projectName}</TableCell>\n                        <TableCell>{credit.location}</TableCell>\n                        <TableCell>\n                          <Badge variant=\"secondary\">{credit.ecosystem}</Badge>\n                        </TableCell>\n                        <TableCell>{credit.areaHectares}</TableCell>\n                        <TableCell>{credit.creditsAvailable}</TableCell>\n                        <TableCell>${credit.pricePerCredit}</TableCell>\n                        <TableCell>\n                          <Dialog>\n                            <DialogTrigger asChild>\n                              <Button \n                                size=\"sm\" \n                                onClick={() => setSelectedCredit(credit)}\n                                data-testid={`button-purchase-${credit.projectId}`}\n                              >\n                                Purchase\n                              </Button>\n                            </DialogTrigger>\n                            <DialogContent>\n                              <DialogHeader>\n                                <DialogTitle>Purchase Carbon Credits</DialogTitle>\n                                <DialogDescription>\n                                  Purchase credits from {credit.projectName} to offset your emissions\n                                </DialogDescription>\n                              </DialogHeader>\n                              <div className=\"space-y-4\">\n                                <div>\n                                  <label className=\"text-sm font-medium\">Number of Credits</label>\n                                  <input\n                                    type=\"number\"\n                                    className=\"w-full mt-1 p-2 border rounded\"\n                                    max={credit.creditsAvailable}\n                                    min=\"1\"\n                                    value={purchaseAmount}\n                                    onChange={(e) => setPurchaseAmount(parseInt(e.target.value))}\n                                    data-testid=\"input-purchase-amount\"\n                                  />\n                                  <p className=\"text-xs text-gray-500 mt-1\">\n                                    Total: ${(purchaseAmount * credit.pricePerCredit).toFixed(2)}\n                                  </p>\n                                </div>\n                                <div>\n                                  <label className=\"text-sm font-medium\">Retirement Reason</label>\n                                  <select \n                                    className=\"w-full mt-1 p-2 border rounded\"\n                                    onChange={(e) => handlePurchase(e.target.value)}\n                                    data-testid=\"select-retirement-reason\"\n                                  >\n                                    <option value=\"\">Select reason...</option>\n                                    <option value=\"Annual carbon offset program\">Annual carbon offset program</option>\n                                    <option value=\"Event carbon neutrality\">Event carbon neutrality</option>\n                                    <option value=\"Corporate sustainability goals\">Corporate sustainability goals</option>\n                                    <option value=\"Product lifecycle offset\">Product lifecycle offset</option>\n                                    <option value=\"Voluntary climate action\">Voluntary climate action</option>\n                                  </select>\n                                </div>\n                              </div>\n                            </DialogContent>\n                          </Dialog>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"history\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Purchase History</CardTitle>\n              <CardDescription>\n                View your carbon credit purchases and offset certificates\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {loadingHistory ? (\n                <div className=\"text-center py-8\">Loading purchase history...</div>\n              ) : (\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Project</TableHead>\n                      <TableHead>Credits Retired</TableHead>\n                      <TableHead>Retirement Reason</TableHead>\n                      <TableHead>Date</TableHead>\n                      <TableHead>Certificate</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {purchaseHistory.map((purchase) => (\n                      <TableRow key={purchase.id}>\n                        <TableCell className=\"font-medium\">{purchase.projectName}</TableCell>\n                        <TableCell>{purchase.creditsRetired}</TableCell>\n                        <TableCell>{purchase.retirementReason}</TableCell>\n                        <TableCell>{new Date(purchase.retiredAt).toLocaleDateString()}</TableCell>\n                        <TableCell>\n                          {purchase.nftCertificateUrl ? (\n                            <Button \n                              size=\"sm\" \n                              variant=\"outline\"\n                              data-testid={`button-download-certificate-${purchase.id}`}\n                            >\n                              <Download className=\"w-4 h-4 mr-2\" />\n                              Download\n                            </Button>\n                          ) : (\n                            <Badge variant=\"secondary\">Processing</Badge>\n                          )}\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":14568},"client/src/pages/map-view.tsx":{"content":"import { useEffect, useRef, useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Globe, Leaf, Droplets } from \"lucide-react\";\n\n// Leaflet imports\ndeclare global {\n  interface Window {\n    L: any;\n  }\n}\n\nexport default function MapView() {\n  const mapRef = useRef<HTMLDivElement>(null);\n  const mapInstanceRef = useRef<any>(null);\n  const [mapLoaded, setMapLoaded] = useState(false);\n\n  // Get all projects\n  const { data: projectsData } = useQuery({\n    queryKey: [\"/api/projects\"],\n  });\n\n  const projects = (projectsData as any)?.projects || [];\n  const verifiedProjects = projects.filter((p: any) => p.status === \"verified\");\n  const gisVerifiedProjects = projects.filter((p: any) => p.gisVerificationStatus === \"verified\");\n  const totalCredits = verifiedProjects.reduce((sum: number, p: any) => sum + parseFloat(p.carbonCredits || \"0\"), 0);\n  const totalArea = verifiedProjects.reduce((sum: number, p: any) => sum + parseFloat(p.areaHectares || \"0\"), 0);\n  const gisVerifiedArea = gisVerifiedProjects.reduce((sum: number, p: any) => sum + parseFloat(p.areaHectares || \"0\"), 0);\n\n  useEffect(() => {\n    // Load Leaflet CSS and JS\n    const loadLeaflet = async () => {\n      if (window.L) {\n        initializeMap();\n        return;\n      }\n\n      // Load CSS\n      const cssLink = document.createElement(\"link\");\n      cssLink.rel = \"stylesheet\";\n      cssLink.href = \"https://unpkg.com/leaflet@1.9.4/dist/leaflet.css\";\n      document.head.appendChild(cssLink);\n\n      // Load JS\n      const script = document.createElement(\"script\");\n      script.src = \"https://unpkg.com/leaflet@1.9.4/dist/leaflet.js\";\n      script.onload = () => {\n        setMapLoaded(true);\n        initializeMap();\n      };\n      document.head.appendChild(script);\n    };\n\n    loadLeaflet();\n\n    return () => {\n      if (mapInstanceRef.current) {\n        mapInstanceRef.current.remove();\n        mapInstanceRef.current = null;\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    if (mapLoaded && projects.length > 0) {\n      addProjectMarkers();\n    }\n  }, [mapLoaded, projects]);\n\n  const initializeMap = () => {\n    if (!mapRef.current || !window.L) return;\n\n    // Remove existing map\n    if (mapInstanceRef.current) {\n      mapInstanceRef.current.remove();\n    }\n\n    // Initialize map\n    mapInstanceRef.current = window.L.map(mapRef.current).setView([0, 0], 2);\n\n    // Add OpenStreetMap tiles\n    window.L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n      attribution: '© OpenStreetMap contributors'\n    }).addTo(mapInstanceRef.current);\n  };\n\n  const addProjectMarkers = () => {\n    if (!mapInstanceRef.current || !window.L) return;\n\n    projects.forEach((project: any) => {\n      const lat = parseFloat(project.latitude);\n      const lng = parseFloat(project.longitude);\n\n      if (isNaN(lat) || isNaN(lng)) return;\n\n      // Determine marker color based on status and GIS verification\n      let color = '#009688'; // Default teal\n      let strokeColor = '#004d40';\n      \n      if (project.status === 'verified') {\n        color = project.gisVerificationStatus === 'verified' ? '#2E7D32' : '#4CAF50';\n        strokeColor = '#1B5E20';\n      } else if (project.status === 'pending') {\n        color = '#f44336';\n        strokeColor = '#c62828';\n      } else if (project.status === 'rejected') {\n        color = '#9E9E9E';\n        strokeColor = '#424242';\n      }\n\n      // Add satellite icon for GIS verified projects\n      const isGisVerified = project.gisVerificationStatus === 'verified';\n      const markerRadius = isGisVerified ? 10 : 8;\n\n      const marker = window.L.circleMarker([lat, lng], {\n        color: strokeColor,\n        fillColor: color,\n        fillOpacity: 0.8,\n        radius: markerRadius,\n        weight: isGisVerified ? 3 : 2\n      }).addTo(mapInstanceRef.current);\n\n      // Enhanced popup content with GIS information\n      const gisStatus = project.gisVerificationStatus || 'pending';\n      const gisConfidence = project.gisConfidenceScore ? (parseFloat(project.gisConfidenceScore) * 100).toFixed(0) : 'N/A';\n      \n      const gisIcon = isGisVerified ? '🛰️' : gisStatus === 'failed' ? '⚠️' : '⏳';\n      const gisColor = isGisVerified ? 'text-green-600' : gisStatus === 'failed' ? 'text-red-600' : 'text-yellow-600';\n\n      const popupContent = `\n        <div class=\"p-3 min-w-[250px]\">\n          <h3 class=\"font-semibold text-sm mb-2\">${project.name}</h3>\n          \n          <div class=\"space-y-1\">\n            <p class=\"text-xs text-gray-600\">\n              <span class=\"font-medium\">Status:</span> \n              <span class=\"capitalize\">${project.status}</span>\n            </p>\n            \n            <p class=\"text-xs ${gisColor}\">\n              <span class=\"font-medium\">GIS Verified:</span> \n              ${gisIcon} <span class=\"capitalize\">${gisStatus}</span>\n              ${isGisVerified ? ` (${gisConfidence}% confidence)` : ''}\n            </p>\n            \n            <p class=\"text-xs text-gray-600\">\n              <span class=\"font-medium\">Area:</span> ${project.areaHectares} ha\n            </p>\n            \n            <p class=\"text-xs text-gray-600\">\n              <span class=\"font-medium\">Type:</span> ${project.projectType}\n            </p>\n            \n            ${parseFloat(project.carbonCredits || \"0\") > 0 ? `\n              <p class=\"text-xs text-green-600 mt-2\">\n                <span class=\"font-medium\">Credits:</span> ${parseFloat(project.carbonCredits).toFixed(0)} BC\n              </p>\n            ` : ''}\n            \n            ${isGisVerified ? `\n              <div class=\"mt-2 pt-2 border-t border-gray-200\">\n                <p class=\"text-xs text-blue-600 font-medium\">Satellite Verified ✓</p>\n                <p class=\"text-xs text-gray-500\">Verified using Sentinel imagery</p>\n              </div>\n            ` : ''}\n          </div>\n        </div>\n      `;\n\n      marker.bindPopup(popupContent);\n    });\n  };\n\n  return (\n    <div className=\"py-12 min-h-screen\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold mb-4\">Global Blue Carbon Projects</h1>\n          <p className=\"text-muted-foreground mb-6\">Explore verified blue carbon restoration projects worldwide</p>\n          \n          {/* Map Legend */}\n          <div className=\"flex flex-wrap gap-4 mb-6\" data-testid=\"map-legend\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-3 h-3 bg-secondary rounded-full\"></div>\n              <span className=\"text-sm text-muted-foreground\">Verified Projects</span>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-3 h-3 bg-destructive rounded-full\"></div>\n              <span className=\"text-sm text-muted-foreground\">Pending Review</span>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-3 h-3 bg-primary rounded-full\"></div>\n              <span className=\"text-sm text-muted-foreground\">Active Restoration</span>\n            </div>\n          </div>\n        </div>\n\n        {/* Map Container */}\n        <Card className=\"overflow-hidden mb-8\" data-testid=\"map-container\">\n          <div \n            ref={mapRef} \n            className=\"leaflet-container\"\n            style={{ height: \"400px\", width: \"100%\" }}\n          />\n        </Card>\n\n        {/* Project Stats */}\n        <div className=\"grid md:grid-cols-3 gap-6\">\n          <Card data-testid=\"stat-global-projects\">\n            <CardContent className=\"p-6 text-center\">\n              <Globe className=\"mx-auto text-primary text-3xl mb-4\" />\n              <h3 className=\"text-2xl font-bold mb-2\">{projects.length}</h3>\n              <p className=\"text-muted-foreground\">Active Projects</p>\n            </CardContent>\n          </Card>\n          <Card data-testid=\"stat-global-credits\">\n            <CardContent className=\"p-6 text-center\">\n              <Leaf className=\"mx-auto text-secondary text-3xl mb-4\" />\n              <h3 className=\"text-2xl font-bold mb-2\">{totalCredits.toFixed(0)}</h3>\n              <p className=\"text-muted-foreground\">Carbon Credits Issued</p>\n            </CardContent>\n          </Card>\n          <Card data-testid=\"stat-global-area\">\n            <CardContent className=\"p-6 text-center\">\n              <Droplets className=\"mx-auto text-primary text-3xl mb-4\" />\n              <h3 className=\"text-2xl font-bold mb-2\">{totalArea.toFixed(0)}</h3>\n              <p className=\"text-muted-foreground\">Hectares Restored</p>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8757},"client/src/pages/ngo-dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Plus, ProjectorIcon, Clock, Leaf, Map, Upload, Eye, Edit } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useWallet } from \"@/hooks/use-wallet\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { insertProjectSchema } from \"@shared/schema\";\n\nconst projectFormSchema = insertProjectSchema.extend({\n  latitude: z.string().min(1, \"Latitude is required\"),\n  longitude: z.string().min(1, \"Longitude is required\"),\n  areaHectares: z.string().min(1, \"Area is required\"),\n});\n\ntype ProjectFormData = z.infer<typeof projectFormSchema>;\n\nexport default function NGODashboard() {\n  const { account } = useWallet();\n  const { toast } = useToast();\n  const [files, setFiles] = useState<File[]>([]);\n\n  const form = useForm<ProjectFormData>({\n    resolver: zodResolver(projectFormSchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      location: \"\",\n      latitude: \"\",\n      longitude: \"\",\n      areaHectares: \"\",\n      projectType: \"mangrove\",\n      submittedBy: account || \"\",\n    },\n  });\n\n  // Get user's projects\n  const { data: userProjects, isLoading } = useQuery({\n    queryKey: [\"/api/projects/user\", account],\n    enabled: !!account,\n  });\n\n  // Get user stats\n  const projects = (userProjects as any)?.projects || [];\n  const activeProjects = projects.filter((p: any) => p.status === \"verified\").length;\n  const pendingProjects = projects.filter((p: any) => p.status === \"pending\").length;\n  const gisVerifiedProjects = projects.filter((p: any) => p.gisVerificationStatus === \"verified\").length;\n  const totalCredits = projects.reduce((sum: number, p: any) => sum + parseFloat(p.carbonCredits || \"0\"), 0);\n  const totalArea = projects.reduce((sum: number, p: any) => sum + parseFloat(p.areaHectares || \"0\"), 0);\n\n  const createProjectMutation = useMutation({\n    mutationFn: (data: ProjectFormData) => \n      apiRequest(\"POST\", \"/api/projects\", {\n        ...data,\n        submittedBy: account,\n        latitude: data.latitude,\n        longitude: data.longitude,\n        areaHectares: data.areaHectares,\n      }),\n    onSuccess: () => {\n      toast({ title: \"Project submitted successfully!\" });\n      form.reset();\n      setFiles([]);\n      queryClient.invalidateQueries({ queryKey: [\"/api/projects/user\", account] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error submitting project\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = async (data: ProjectFormData) => {\n    if (!account) {\n      toast({\n        title: \"Wallet not connected\",\n        description: \"Please connect your wallet to submit a project.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createProjectMutation.mutate(data);\n  };\n\n  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const selectedFiles = Array.from(event.target.files || []);\n    setFiles(prev => [...prev, ...selectedFiles]);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"verified\": return \"bg-secondary/10 text-secondary\";\n      case \"pending\": return \"bg-muted text-muted-foreground\";\n      case \"rejected\": return \"bg-destructive/10 text-destructive\";\n      default: return \"bg-muted text-muted-foreground\";\n    }\n  };\n\n  if (!account) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <Card className=\"w-full max-w-md\">\n          <CardContent className=\"pt-6 text-center\">\n            <h2 className=\"text-2xl font-bold mb-4\">Connect Your Wallet</h2>\n            <p className=\"text-muted-foreground mb-4\">\n              Please connect your wallet to access the NGO dashboard.\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"py-12 bg-muted/30 min-h-screen\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center mb-8\">\n          <div>\n            <h1 className=\"text-3xl font-bold\">NGO Dashboard</h1>\n            <p className=\"text-muted-foreground mt-2\">Manage your blue carbon restoration projects</p>\n          </div>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid md:grid-cols-4 gap-6 mb-8\">\n          <Card data-testid=\"stat-active-projects\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-muted-foreground text-sm\">Active Projects</p>\n                  <p className=\"text-2xl font-bold\">{activeProjects}</p>\n                </div>\n                <ProjectorIcon className=\"text-primary text-2xl\" />\n              </div>\n            </CardContent>\n          </Card>\n          <Card data-testid=\"stat-pending-review\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-muted-foreground text-sm\">Pending Review</p>\n                  <p className=\"text-2xl font-bold\">{pendingProjects}</p>\n                </div>\n                <Clock className=\"text-secondary text-2xl\" />\n              </div>\n            </CardContent>\n          </Card>\n          <Card data-testid=\"stat-carbon-credits\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-muted-foreground text-sm\">Carbon Credits</p>\n                  <p className=\"text-2xl font-bold\">{totalCredits.toFixed(0)}</p>\n                </div>\n                <Leaf className=\"text-primary text-2xl\" />\n              </div>\n            </CardContent>\n          </Card>\n          <Card data-testid=\"stat-area-restored\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-muted-foreground text-sm\">Area Restored</p>\n                  <p className=\"text-2xl font-bold\">{totalArea.toFixed(0)} ha</p>\n                </div>\n                <Map className=\"text-secondary text-2xl\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid lg:grid-cols-2 gap-8\">\n          {/* Project Registration Form */}\n          <Card data-testid=\"project-registration-form\">\n            <CardHeader>\n              <CardTitle>Register New Project</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"name\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Project Name</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Mangrove Restoration - Sundarbans\" {...field} data-testid=\"input-project-name\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"location\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Location</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Sundarbans, Bangladesh\" {...field} data-testid=\"input-location\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"latitude\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Latitude</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"22.4924\" {...field} data-testid=\"input-latitude\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"longitude\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Longitude</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"89.1697\" {...field} data-testid=\"input-longitude\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"areaHectares\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Area (Hectares)</FormLabel>\n                          <FormControl>\n                            <Input type=\"number\" placeholder=\"15\" {...field} data-testid=\"input-area\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"projectType\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Project Type</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-project-type\">\n                                <SelectValue placeholder=\"Select type\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"mangrove\">Mangrove Restoration</SelectItem>\n                              <SelectItem value=\"seagrass\">Seagrass Conservation</SelectItem>\n                              <SelectItem value=\"saltmarsh\">Salt Marsh Restoration</SelectItem>\n                              <SelectItem value=\"other\">Other</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <FormField\n                    control={form.control}\n                    name=\"description\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Project Description</FormLabel>\n                        <FormControl>\n                          <Textarea \n                            placeholder=\"Describe your blue carbon restoration project...\"\n                            className=\"h-32\"\n                            {...field}\n                            data-testid=\"textarea-description\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <div>\n                    <label className=\"block text-sm font-medium mb-2\">Field Data Upload</label>\n                    <div className=\"border-2 border-dashed border-border rounded-lg p-6 text-center\">\n                      <Upload className=\"mx-auto text-muted-foreground text-3xl mb-4\" />\n                      <p className=\"text-muted-foreground mb-2\">Drop files here or click to browse</p>\n                      <p className=\"text-sm text-muted-foreground\">Photos, videos, and geo-data (Max 10MB each)</p>\n                      <input \n                        type=\"file\" \n                        multiple \n                        onChange={handleFileUpload}\n                        className=\"hidden\" \n                        accept=\"image/*,video/*\"\n                        data-testid=\"input-files\"\n                      />\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        className=\"mt-4\"\n                        onClick={() => document.querySelector<HTMLInputElement>('[data-testid=\"input-files\"]')?.click()}\n                        data-testid=\"button-browse-files\"\n                      >\n                        Browse Files\n                      </Button>\n                    </div>\n                    {files.length > 0 && (\n                      <div className=\"mt-4\">\n                        <p className=\"text-sm font-medium mb-2\">{files.length} file(s) selected:</p>\n                        <ul className=\"text-sm text-muted-foreground\">\n                          {files.map((file, index) => (\n                            <li key={index}>{file.name}</li>\n                          ))}\n                        </ul>\n                      </div>\n                    )}\n                  </div>\n\n                  <Button \n                    type=\"submit\" \n                    className=\"w-full\"\n                    disabled={createProjectMutation.isPending}\n                    data-testid=\"button-submit-project\"\n                  >\n                    {createProjectMutation.isPending ? \"Submitting...\" : \"Submit Project for Review\"}\n                  </Button>\n                </form>\n              </Form>\n            </CardContent>\n          </Card>\n\n          {/* Project List */}\n          <Card data-testid=\"project-list\">\n            <CardHeader>\n              <CardTitle>Your Projects</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {isLoading ? (\n                <div className=\"space-y-4\">\n                  {[1, 2, 3].map(i => (\n                    <div key={i} className=\"border border-border rounded-lg p-4 animate-pulse\">\n                      <div className=\"h-4 bg-muted rounded w-3/4 mb-2\"></div>\n                      <div className=\"h-3 bg-muted rounded w-1/2\"></div>\n                    </div>\n                  ))}\n                </div>\n              ) : projects.length === 0 ? (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <ProjectorIcon className=\"mx-auto h-12 w-12 mb-4\" />\n                  <p>No projects submitted yet.</p>\n                  <p className=\"text-sm\">Submit your first blue carbon restoration project!</p>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {projects.map((project: any) => (\n                    <div key={project.id} className=\"border border-border rounded-lg p-4\" data-testid={`project-${project.id}`}>\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <h4 className=\"font-medium\">{project.name}</h4>\n                        <Badge className={getStatusColor(project.status)}>\n                          {project.status}\n                        </Badge>\n                      </div>\n                      <p className=\"text-sm text-muted-foreground mb-3\">\n                        {project.latitude}, {project.longitude} • {project.areaHectares} ha restored\n                      </p>\n                      <div className=\"flex items-center justify-between\">\n                        {project.status === \"verified\" ? (\n                          <span className=\"text-sm text-muted-foreground\">\n                            Credits: {parseFloat(project.carbonCredits || \"0\").toFixed(0)} BC\n                          </span>\n                        ) : (\n                          <span className=\"text-sm text-muted-foreground\">\n                            Submitted: {new Date(project.createdAt).toLocaleDateString()}\n                          </span>\n                        )}\n                        <div className=\"flex space-x-2\">\n                          <Button size=\"sm\" variant=\"ghost\" data-testid={`button-view-${project.id}`}>\n                            <Eye className=\"h-4 w-4\" />\n                          </Button>\n                          <Button size=\"sm\" variant=\"ghost\" data-testid={`button-edit-${project.id}`}>\n                            <Edit className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":17713},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"server/gisService.ts":{"content":"import { z } from \"zod\";\n\n// Types for GIS verification\nexport interface GisVerificationResult {\n  status: \"verified\" | \"failed\" | \"insufficient_data\";\n  confidenceScore: number; // 0-1\n  vegetationIndex: number; // NDVI value\n  areaValidatedHectares: number;\n  imageDate: string;\n  metadata: {\n    sentinelSceneId?: string;\n    cloudCover: number;\n    vegetationHealth: \"excellent\" | \"good\" | \"moderate\" | \"poor\";\n    coastalProximity: boolean;\n    anomaliesDetected: string[];\n  };\n  error?: string;\n}\n\nexport interface GisCoordinates {\n  latitude: number;\n  longitude: number;\n  areaHectares: number;\n  projectType: \"mangrove\" | \"seagrass\" | \"saltmarsh\" | \"other\";\n}\n\n/**\n * Service for integrating with Sentinel Hub API for satellite imagery verification\n */\nexport class GisVerificationService {\n  private sentinelHubApiKey: string | null;\n  private sentinelHubBaseUrl = \"https://services.sentinel-hub.com/api/v1\";\n\n  constructor() {\n    this.sentinelHubApiKey = process.env.SENTINEL_HUB_API_KEY || null;\n  }\n\n  /**\n   * Verify mangrove plantation area using Sentinel-2 satellite imagery\n   */\n  async verifyPlantationArea(coordinates: GisCoordinates): Promise<GisVerificationResult> {\n    try {\n      // If no API key is available, return a simulated result for development\n      if (!this.sentinelHubApiKey) {\n        console.warn(\"Sentinel Hub API key not configured. Returning simulated GIS verification.\");\n        return this.simulateGisVerification(coordinates);\n      }\n\n      // Create bounding box around the project coordinates\n      const buffer = 0.01; // ~1km buffer\n      const bbox = [\n        coordinates.longitude - buffer,\n        coordinates.latitude - buffer,\n        coordinates.longitude + buffer,\n        coordinates.latitude + buffer\n      ];\n\n      // Get latest available Sentinel-2 data\n      const imageData = await this.fetchSentinelImagery(bbox);\n      \n      if (!imageData) {\n        return {\n          status: \"failed\",\n          confidenceScore: 0,\n          vegetationIndex: 0,\n          areaValidatedHectares: 0,\n          imageDate: new Date().toISOString(),\n          metadata: {\n            cloudCover: 100,\n            vegetationHealth: \"poor\",\n            coastalProximity: false,\n            anomaliesDetected: [\"No imagery available\"]\n          },\n          error: \"No recent satellite imagery available\"\n        };\n      }\n\n      // Calculate vegetation indices (NDVI, etc.)\n      const vegetationAnalysis = await this.analyzeVegetation(imageData, coordinates);\n      \n      // Validate coastal proximity for blue carbon projects\n      const coastalCheck = await this.validateCoastalProximity(coordinates);\n      \n      // Generate verification result\n      return this.generateVerificationResult(vegetationAnalysis, coastalCheck, coordinates);\n      \n    } catch (error) {\n      console.error(\"GIS verification failed:\", error);\n      return {\n        status: \"failed\",\n        confidenceScore: 0,\n        vegetationIndex: 0,\n        areaValidatedHectares: 0,\n        imageDate: new Date().toISOString(),\n        metadata: {\n          cloudCover: 100,\n          vegetationHealth: \"poor\",\n          coastalProximity: false,\n          anomaliesDetected: [\"Verification service error\"]\n        },\n        error: error instanceof Error ? error.message : \"Unknown error\"\n      };\n    }\n  }\n\n  /**\n   * Fetch Sentinel-2 imagery for the specified bounding box\n   */\n  private async fetchSentinelImagery(bbox: number[]): Promise<any> {\n    if (!this.sentinelHubApiKey) return null;\n\n    const requestBody = {\n      input: {\n        bounds: {\n          bbox: bbox,\n          properties: {\n            crs: \"http://www.opengis.net/def/crs/EPSG/0/4326\"\n          }\n        },\n        data: [{\n          type: \"sentinel-2-l2a\",\n          dataFilter: {\n            timeRange: {\n              from: new Date(Date.now() - 90 * 24 * 60 * 60 * 1000).toISOString().split('T')[0] + \"T00:00:00Z\", // Last 90 days\n              to: new Date().toISOString().split('T')[0] + \"T23:59:59Z\"\n            },\n            maxCloudCoverage: 20\n          }\n        }]\n      },\n      output: {\n        width: 512,\n        height: 512,\n        responses: [{\n          identifier: \"default\",\n          format: {\n            type: \"image/jpeg\"\n          }\n        }]\n      },\n      evalscript: this.getNdviEvalScript()\n    };\n\n    const response = await fetch(`${this.sentinelHubBaseUrl}/process`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${this.sentinelHubApiKey}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(requestBody)\n    });\n\n    if (!response.ok) {\n      throw new Error(`Sentinel Hub API error: ${response.status}`);\n    }\n\n    return response.blob();\n  }\n\n  /**\n   * Evalscript for calculating NDVI (Normalized Difference Vegetation Index)\n   */\n  private getNdviEvalScript(): string {\n    return `\n      //VERSION=3\n      function setup() {\n        return {\n          input: [\"B04\", \"B08\", \"SCL\"],\n          output: { bands: 3 }\n        };\n      }\n\n      function evaluatePixel(sample) {\n        // Calculate NDVI\n        let ndvi = (sample.B08 - sample.B04) / (sample.B08 + sample.B04);\n        \n        // Color code based on NDVI values\n        if (ndvi < 0.2) return [0.8, 0.4, 0.2]; // Low vegetation\n        if (ndvi < 0.4) return [0.9, 0.7, 0.2]; // Moderate vegetation  \n        if (ndvi < 0.6) return [0.5, 0.8, 0.2]; // Good vegetation\n        return [0.2, 0.6, 0.2]; // Excellent vegetation\n      }\n    `;\n  }\n\n  /**\n   * Analyze vegetation health and coverage from satellite imagery\n   */\n  private async analyzeVegetation(imageData: Blob, coordinates: GisCoordinates): Promise<any> {\n    // In a real implementation, this would analyze the actual satellite imagery\n    // For now, we'll simulate the analysis based on project type and location\n    const baseNdvi = this.getBaseNdviForProjectType(coordinates.projectType);\n    const locationFactor = this.getLocationFactor(coordinates.latitude, coordinates.longitude);\n    \n    return {\n      ndvi: Math.min(1.0, baseNdvi * locationFactor),\n      vegetationCoverage: Math.min(100, coordinates.areaHectares * 0.8), // 80% of claimed area\n      cloudCover: Math.random() * 15, // Random cloud cover 0-15%\n      imageQuality: \"good\"\n    };\n  }\n\n  /**\n   * Validate that the project is in coastal proximity for blue carbon eligibility\n   */\n  private async validateCoastalProximity(coordinates: GisCoordinates): Promise<boolean> {\n    // Simple coastal proximity check - in reality this would use coastline datasets\n    // For now, check if within reasonable coastal latitude ranges\n    const lat = Math.abs(coordinates.latitude);\n    const lng = Math.abs(coordinates.longitude);\n    \n    // Most coastal blue carbon projects are within 60 degrees latitude\n    // and near major water bodies (simplified check)\n    return lat < 60 && (\n      // Near major coastal regions (simplified)\n      (lng > 60 && lng < 180) || // Asia-Pacific\n      (lng > 0 && lng < 40) ||   // Africa-Europe\n      (lng > 280 && lng < 360)   // Americas\n    );\n  }\n\n  /**\n   * Generate final verification result based on analysis\n   */\n  private generateVerificationResult(\n    vegetationAnalysis: any, \n    coastalCheck: boolean, \n    coordinates: GisCoordinates\n  ): GisVerificationResult {\n    const ndvi = vegetationAnalysis.ndvi;\n    const cloudCover = vegetationAnalysis.cloudCover;\n    \n    // Determine vegetation health\n    let vegetationHealth: \"excellent\" | \"good\" | \"moderate\" | \"poor\";\n    if (ndvi > 0.6) vegetationHealth = \"excellent\";\n    else if (ndvi > 0.4) vegetationHealth = \"good\";\n    else if (ndvi > 0.2) vegetationHealth = \"moderate\";\n    else vegetationHealth = \"poor\";\n\n    // Calculate confidence score\n    let confidenceScore = 0;\n    if (ndvi > 0.3) confidenceScore += 0.4; // Vegetation presence\n    if (coastalCheck) confidenceScore += 0.3; // Coastal proximity\n    if (cloudCover < 20) confidenceScore += 0.2; // Image quality\n    if (coordinates.projectType === \"mangrove\" && ndvi > 0.5) confidenceScore += 0.1; // Project type match\n\n    // Determine status\n    const status = confidenceScore > 0.6 && coastalCheck && ndvi > 0.3 ? \"verified\" : \"failed\";\n\n    const anomalies: string[] = [];\n    if (!coastalCheck) anomalies.push(\"Location not in coastal proximity\");\n    if (ndvi < 0.2) anomalies.push(\"Low vegetation coverage detected\");\n    if (cloudCover > 50) anomalies.push(\"High cloud cover affecting analysis\");\n\n    return {\n      status,\n      confidenceScore: Math.min(1.0, confidenceScore),\n      vegetationIndex: ndvi,\n      areaValidatedHectares: vegetationAnalysis.vegetationCoverage,\n      imageDate: new Date().toISOString(),\n      metadata: {\n        sentinelSceneId: `S2_${Date.now()}`,\n        cloudCover: cloudCover,\n        vegetationHealth,\n        coastalProximity: coastalCheck,\n        anomaliesDetected: anomalies\n      }\n    };\n  }\n\n  /**\n   * Simulate GIS verification for development when API key is not available\n   */\n  private simulateGisVerification(coordinates: GisCoordinates): GisVerificationResult {\n    const projectTypeScores = {\n      mangrove: 0.8,\n      seagrass: 0.7,\n      saltmarsh: 0.75,\n      other: 0.6\n    };\n\n    const baseScore = projectTypeScores[coordinates.projectType];\n    const randomFactor = 0.8 + Math.random() * 0.4; // 0.8 to 1.2\n    const finalScore = Math.min(1.0, baseScore * randomFactor);\n    \n    const coastalCheck = Math.abs(coordinates.latitude) < 60;\n    const ndvi = 0.3 + Math.random() * 0.5; // 0.3 to 0.8\n\n    return {\n      status: finalScore > 0.6 && coastalCheck ? \"verified\" : \"failed\",\n      confidenceScore: finalScore,\n      vegetationIndex: ndvi,\n      areaValidatedHectares: coordinates.areaHectares * (0.7 + Math.random() * 0.3),\n      imageDate: new Date().toISOString(),\n      metadata: {\n        sentinelSceneId: `SIMULATED_${Date.now()}`,\n        cloudCover: Math.random() * 20,\n        vegetationHealth: ndvi > 0.6 ? \"excellent\" : ndvi > 0.4 ? \"good\" : \"moderate\",\n        coastalProximity: coastalCheck,\n        anomaliesDetected: finalScore < 0.6 ? [\"Simulated verification - low confidence\"] : []\n      }\n    };\n  }\n\n  /**\n   * Get base NDVI value for different project types\n   */\n  private getBaseNdviForProjectType(projectType: string): number {\n    switch (projectType) {\n      case \"mangrove\": return 0.7; // Mangroves typically have high NDVI\n      case \"seagrass\": return 0.4; // Underwater vegetation\n      case \"saltmarsh\": return 0.6; // Salt-tolerant vegetation\n      default: return 0.5;\n    }\n  }\n\n  /**\n   * Get location factor based on latitude/longitude for realistic simulation\n   */\n  private getLocationFactor(lat: number, lng: number): number {\n    // Simulate better vegetation in tropical regions\n    const tropicalBonus = Math.abs(lat) < 30 ? 1.2 : 1.0;\n    \n    // Add some randomness for realistic variation\n    const randomVariation = 0.8 + Math.random() * 0.4;\n    \n    return tropicalBonus * randomVariation;\n  }\n}\n\n// Export singleton instance\nexport const gisVerificationService = new GisVerificationService();","size_bytes":11094}},"version":1}